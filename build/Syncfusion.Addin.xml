<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Addin</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Addin.AddInAttribute">
            <summary>
            Attribute to be specified for each Innosys bundle to specify
            which class is the bundle activator.
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.AddInAttribute.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.AddInAttribute.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.AddInAttribute.Publisher">
            <summary>
            版权
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.AddInAttribute.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.AddInBase">
            <summary>
            Class AddInBase.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.AddInBase.Start(Syncfusion.Addin.IBundleContext)">
            <summary>
            启动
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Syncfusion.Addin.AddInBase.Stop(Syncfusion.Addin.IBundleContext)">
            <summary>
            停止
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Syncfusion.Addin.BundleEventArgs">
            <summary>
            Class BundleEventArgs.
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.BundleEventArgs.bundle">
            <summary>
            组件对象
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.BundleEventArgs.transition">
            <summary>
            当前状态
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.BundleEventArgs.Bundle">
            <summary>
            组件对象
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.BundleEventArgs.Transition">
            <summary>
            当前状态
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.BundleEventHandler">
             <summary>
            Bundle Event Handler
             </summary>
             <param name="sender">Bundle object</param>
             <param name="e">Bundle Event Args <see cref="T:Syncfusion.Addin.BundleEventArgs"/></param>
        </member>
        <member name="T:Syncfusion.Addin.BundleException">
            <summary>
            Class BundleException.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.BundleException.#ctor(System.String)">
            <summary>
            Bundle Exception
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Syncfusion.Addin.BundleException.#ctor(System.String,System.Exception)">
            <summary>
            Bundle Exception
            </summary>
            <param name="message">message</param>
            <param name="inner">Exception</param>
        </member>
        <member name="M:Syncfusion.Addin.BundleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Bundle Exception
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="T:Syncfusion.Addin.Core.BundleRuntime">
            <summary>
            Plugin Start
            </summary>
            <example>
            using Syncfusion.Addin.Core;
            using(BundleRuntime runtime=new BundleRuntime())
            {
            runtime.Start();//插件启动
            }
            </example>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleRuntime._registeredBunldeCache">
            <summary>
            Bundle datas
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.BundleRuntime.Instance">
            <summary>
            单例模式
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.System#IDisposable#Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Core.BundleRuntime"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Core.BundleRuntime"/> class.
            </summary>
            <param name="pluginsPath">The plugins path.</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Core.BundleRuntime"/> class.
            </summary>
            <param name="pluginsPathList">The plugins path list.</param>
            <exception cref="T:System.Exception">
            </exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.Start(System.String[])">
            <summary>
            启动服务
            </summary>
            <param name="args">参数</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.BundleRuntime.Verison">
            <summary>
            get Verison
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.GetBundleDatas(System.Collections.Generic.Dictionary{Syncfusion.Addin.Configuration.Plugin.BundleData,System.Collections.Generic.List{System.Reflection.Assembly}})">
            <summary>
            Get Bundle Datas
            </summary>
            <param name="bunldeCache">Bundle Cache</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.InstallAllBundlesByBundleData(System.Collections.Generic.Dictionary{Syncfusion.Addin.Configuration.Plugin.BundleData,System.Collections.Generic.List{System.Reflection.Assembly}})">
            <summary>
            Install All Bundles By BundleData
            </summary>
            <param name="bunldeCache">bunldeCache</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.LoadBundleForBundleData(Syncfusion.Addin.Configuration.Plugin.BundleData)">
            <summary>
            load Bundle by BundleData info
            </summary>
            <param name="bd">BundleData info </param>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.GetAssemblyForLocation(System.String)">
            <summary>
            load Assembly For Location
            </summary>
            <param name="location">Assembly file full path</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.StartAllBundles">
            <summary>
            Start All Bundles
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.StartBundleByDependencie(Syncfusion.Addin.Configuration.Plugin.DependencyData)">
            <summary>
            Start Dependencie Bundles(note:Recursive)
            </summary>
            <param name="depenData">DependencyData</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.StartBundle(Syncfusion.Addin.IBundle)">
            <summary>
            Start Bundle and add Assembly to TopLevelReferencedAssemblies
            (note: web application need Assembly to TopLevelReferencedAssemblies)
            </summary>
            <param name="bundle">bundle</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRuntime.GetHostAssembly">
            <summary>
            Get Current web application`s TopLevelReferencedAssemblies
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Core.Bundle">
            <summary>
            Summary description for Bundle.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.SetDynamicInfo">
            <summary>
            Sets the dynamic information.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.Start">
            <summary>
            Start Bundle
            </summary>
            <exception cref="T:Syncfusion.Addin.BundleException">No activator for:  +Location</exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.SearchAssemblyByDirectory(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Search Assembly By Directory
            </summary>
            <param name="assemblyName">assemblyName</param>
            <param name="directorys">plugin directorys</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Assemblies the resolve.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.ResolveEventArgs"/> instance containing the event data.</param>
            <returns>Assembly.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.Uninstall">
            <summary>
            Bundle Uninstall
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.Update">
            <summary>
            Bundle Update
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.Update(System.IO.Stream)">
            <summary>
            Bundle Update with Stream
            </summary>
            <param name="inputStream">The input stream.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.GetProperties">
            <summary>
            Bundle GetProperties
            </summary>
            <returns>Dictionary&lt;System.String, System.Object&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.GetRegisteredServices">
            <summary>
            Get Registered Services
            </summary>
            <returns>IServiceReference[].</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.GetServicesInUse">
            <summary>
            Get Services In Use
            </summary>
            <returns>IServiceReference[].</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.GetResource(System.String)">
            <summary>
            GetResource
            </summary>
            <param name="name">Resource Name</param>
            <returns>Object</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.GetProperties(System.String)">
            <summary>
            Get Properties
            </summary>
            <param name="locale">文件</param>
            <returns>Dictionary&lt;System.String, System.Object&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Syncfusion.Addin.Core.Bundle.SymbolicName">
            <summary>
            Symbolic Name
            </summary>
            <value>The name of the symbolic.</value>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.LoadClass(System.String)">
            <summary>
            Load Class by Name
            </summary>
            <param name="name">Type name</param>
            <returns>Type.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.GetResources(System.Object)">
            <summary>
            Get Resources
            </summary>
            <param name="name">Resources name</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.GetEntryPaths(System.String)">
            <summary>
            Get Entry Paths
            </summary>
            <param name="name">名称</param>
            <returns>IEnumerator.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.GetEntry(System.String)">
            <summary>
            Get Entry
            </summary>
            <param name="name">name</param>
            <returns>IEnumerator.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.GetLastModified">
            <summary>
            Get Last Modified
            </summary>
            <returns>System.Int64.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.Bundle.FindEntries(System.String,System.String,System.Boolean)">
            <summary>
            Find Entries
            </summary>
            <param name="path">path</param>
            <param name="filePattern">file Pattern</param>
            <param name="recurse">recurse</param>
            <returns>IEnumerator.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Syncfusion.Addin.Core.BundleContext">
            <summary>
            IBundleContext implementation.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleContext.#ctor(Syncfusion.Addin.Core.Bundle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Core.BundleContext"/> class.
            </summary>
            <param name="bundle">The bundle.</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleContext.GetBundle(System.Int32)">
            <summary>
            获取组件ID
            </summary>
            <param name="id">The identifier.</param>
            <returns>IBundle.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleContext.GetDataFile(System.String)">
            <summary>
            Gets the data file.
            </summary>
            <param name="name">The name.</param>
            <returns>FileSystemInfo.</returns>
            <exception cref="T:System.InvalidOperationException">The bundle has stopped</exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleContext.CreateServiceRegistration(System.String[],System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates the service registration.
            </summary>
            <param name="clazzes">The clazzes.</param>
            <param name="service">The service.</param>
            <param name="properties">The properties.</param>
            <returns>IServiceRegistration.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleContext.CheckServiceClass(System.String[],System.Object)">
            <summary>
            Checks the service class.
            </summary>
            <param name="clazzes">The clazzes.</param>
            <param name="serviceObject">The service object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleContext.IsAssignableTo(Syncfusion.Addin.IServiceReference)">
            <summary>
            匹配
            </summary>
            <param name="reference">服务引用</param>
            <returns>bool</returns>
        </member>
        <member name="T:Syncfusion.Addin.Core.BundleRepository">
            <summary>
            Class BundleRepository.
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleRepository._bundlesByInstallOrder">
            <summary>
            The _bundles by install order
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleRepository._bundlesById">
            <summary>
            The _bundles by identifier
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleRepository._bundlesBySymbolicName">
            <summary>
            The _bundles by symbolic name
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleRepository.syncObj">
            <summary>
            The synchronize object
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.BundleRepository.Count">
            <summary>
            组件数量
            </summary>
            <value>The count.</value>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Core.BundleRepository"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.BundleRepository.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.Addin.IBundle"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>IBundle.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRepository.GetBundles">
            <summary>
            获取所有组件
            </summary>
            <returns>IBundle</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRepository.GetBundle(System.Int32)">
            <summary>
            根据组件编号获取组件
            </summary>
            <param name="bundleId">组件编号</param>
            <returns>IBundle</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRepository.GetBundle(System.String)">
            <summary>
            根据位置获取组件
            </summary>
            <param name="location">位置</param>
            <returns>IBundle</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRepository.GetBundles(System.String)">
            <summary>
            获取组件列表
            </summary>
            <param name="symbolicName">名称</param>
            <returns>IBundle[] 数组</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRepository.GetBundle(System.String,System.Version)">
            <summary>
            获取组件
            </summary>
            <param name="symbolicName">名称</param>
            <param name="version">版本</param>
            <returns>IBundle</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRepository.Register(Syncfusion.Addin.IBundle)">
            <summary>
            注册组件
            </summary>
            <param name="bundle">组件</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.BundleRepository.Unregister(Syncfusion.Addin.IBundle)">
            <summary>
            卸载组件
            </summary>
            <param name="bundle">组件</param>
            <returns>bool</returns>
        </member>
        <member name="P:Syncfusion.Addin.Core.BundleRepository.BundlePaths">
            <summary>
            组件路经
            </summary>
            <value>The bundle paths.</value>
        </member>
        <member name="T:Syncfusion.Addin.Core.BundleRuntimeState">
            <summary>
            组件运行状态
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleRuntimeState.Starting">
            <summary>
            正在启动
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleRuntimeState.Started">
            <summary>
            已启动
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleRuntimeState.Stopping">
            <summary>
            正在停止
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleRuntimeState.Stopped">
            <summary>
            已停止
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleRuntimeState.Disposed">
            <summary>
            已释放
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Core.BundleRuntimeType">
            <summary>
            Enum BundleRuntimeType
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleRuntimeType.CsNet">
            <summary>
            The cs net
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleRuntimeType.AspNet">
            <summary>
            The ASP net
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Core.BundleStartOptions">
            <summary>
            Enum BundleStartOptions
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleStartOptions.Transient">
            <summary>
            The transient
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleStartOptions.General">
            <summary>
            The general
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Core.BundleStopOptions">
            <summary>
            Enum BundleStopOptions
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleStopOptions.Transient">
            <summary>
            The transient
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.BundleStopOptions.General">
            <summary>
            The general
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Core.EventManager">
            <summary>
            Framework event manager.
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.EventManager.Events">
            <summary>
            The events
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.EventManager.Bundlekey">
            <summary>
            The bundlekey
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.EventManager.Servicekey">
            <summary>
            The servicekey
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.EventManager.Frameworkkey">
            <summary>
            The frameworkkey
            </summary>
        </member>
        <member name="E:Syncfusion.Addin.Core.EventManager.BundleEvent">
            <summary>
            Occurs when [bundle event].
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.EventManager.OnBundleChanged(Syncfusion.Addin.BundleEventArgs)">
            <summary>
            Handles the <see cref="E:BundleChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:Syncfusion.Addin.BundleEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.EventManager.#cctor">
            <summary>
            事件管理
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Core.Filter">
            <summary>
            Class Filter.
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.Filter.filterString">
            <summary>
            The filter string
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Filter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Core.Filter"/> class.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.Filter.Match(Syncfusion.Addin.IServiceReference)">
            <summary>
            匹配
            </summary>
            <param name="reference">服务引用</param>
            <returns>Bool</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Filter.Match(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            匹配
            </summary>
            <param name="dictionary">字典信息</param>
            <returns>Bool</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Filter.MatchCase(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            匹配  区分大小写
            </summary>
            <param name="dictionary">字典信息</param>
            <returns>Bool</returns>
        </member>
        <member name="T:Syncfusion.Addin.Core.Framework">
            <summary>
            Main class of the Innosys framework. This class is internal, not accessible from outside the
            Innosys assembly.
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Core.Framework.ServiceItem">
            <summary>
            Class ServiceItem.
            </summary>
        </member>
        <member name="E:Syncfusion.Addin.Core.Framework.FrameworkEvent">
            <summary>
            Occurs when [framework event].
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Core.Framework"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.InitializeFramework">
            <summary>
            Initializes the framework.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The framework is already started
            or
            The framework is already started
            </exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.Launch">
            <summary>
            加载
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.Shutdown">
            <summary>
            关闭/卸载
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.ValidExtention(System.String)">
            <summary>
            ValidExtention
            </summary>
            <param name="location">File full path</param>
            <returns>Boolean.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.InstallBundle(System.String)">
            <summary>
            注册组件
            </summary>
            <param name="location">位置</param>
            <returns>IBundle</returns>
            <exception cref="T:Syncfusion.Addin.BundleException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.InstallBundle(System.String,Syncfusion.Addin.Configuration.Plugin.BundleData)">
            <summary>
            注册组件
            </summary>
            <param name="location">位置</param>
            <param name="bd">组件数据</param>
            <returns>IBundle</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.CheckInstallBundle(Syncfusion.Addin.Core.Bundle)">
            <summary>
            Checks the install bundle.
            </summary>
            <param name="bundle">The bundle.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.InstallBundleInternal(Syncfusion.Addin.Core.Bundle)">
            <summary>
            Installs the bundle internal.
            </summary>
            <param name="bundle">The bundle.</param>
            <returns>IBundle.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.GetBundle(System.String)">
            <summary>
            获取组件
            </summary>
            <param name="location">位置</param>
            <returns>IBundle.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.UninstallBundle(System.Int32)">
            <summary>
            卸载组件
            </summary>
            <param name="id">组件编号</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.StartBundle(System.Int32)">
            <summary>
            启动
            </summary>
            <param name="id">组件编号</param>
            <returns>IBundle</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.StopBundle(System.Int32)">
            <summary>
            停止组件根据编号
            </summary>
            <param name="id">组件编号</param>
        </member>
        <!-- 对于成员“M:Syncfusion.Addin.Core.Framework.StartBundle(Syncfusion.Addin.IBundle)”忽略有格式错误的 XML 注释 -->
        <member name="M:Syncfusion.Addin.Core.Framework.GetServiceReferences(System.String,System.String,Syncfusion.Addin.IBundleContext,System.Boolean)">
            <summary>
            获取服务引用
            </summary>
            <param name="clazz">类</param>
            <param name="filterString">过滤字符串</param>
            <param name="context">组件</param>
            <param name="allservices">是否所有服务</param>
            <returns>IServiceReference[]</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.GetNextServiceId">
            <summary>
            返回服务编号
            </summary>
            <returns>Int</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.CreateDomain(Syncfusion.Addin.IBundleContext)">
            <summary>
            Creates the domain.
            </summary>
            <param name="context">The context.</param>
            <returns>AppDomain.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.Framework.UnloadDomain(System.AppDomain)">
            <summary>
            Unloads the domain.
            </summary>
            <param name="domain">The domain.</param>
        </member>
        <member name="T:Syncfusion.Addin.Core.IServiceRegistry">
            <summary>
            Interface IServiceRegistry
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.IServiceRegistry.PublishService(Syncfusion.Addin.IBundleContext,Syncfusion.Addin.IServiceRegistration)">
            Publishes a service to this ServiceRegistry.
            @param context the BundleContext that registered the service.
            @param serviceReg the ServiceRegistration to register.
            <summary>
            Publishes the service.
            </summary>
            <param name="context">The context.</param>
            <param name="serviceRegistration">The service registration.</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.IServiceRegistry.UnpublishService(Syncfusion.Addin.IBundleContext,Syncfusion.Addin.IServiceRegistration)">
            Unpublishes a service from this ServiceRegistry
            @param context the BundleContext that registered the service.
            @param serviceReg the ServiceRegistration to unpublish.
            <summary>
            Unpublishes the service.
            </summary>
            <param name="context">The context.</param>
            <param name="serviceRegistration">The service registration.</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.IServiceRegistry.UnpublishServices(Syncfusion.Addin.IBundleContext)">
            Unpublishes all services from this ServiceRegistry that the
            specified BundleContext registered.
            @param context the BundleContext to unpublish all services for.
            <summary>
            Unpublishes the services.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.IServiceRegistry.LookupServiceReferences(System.String,Syncfusion.Addin.IFilter)">
            Performs a lookup for ServiceReferences that are bound to this
            ServiceRegistry. If both clazz and filter are null then all bound
            ServiceReferences are returned.
            @param clazz A fully qualified class name.  All ServiceReferences that
            reference an object that implement this class are returned.  May be
            null.
            @param filter Used to match against published Services.  All
            ServiceReferences that match the filter are returned.  If a clazz is
            specified then all ServiceReferences that match the clazz and the
            filter parameter are returned. May be null.
            @return An array of all matching ServiceReferences or null
            if none exist.
            <summary>
            Lookups the service references.
            </summary>
            <param name="clazz">The clazz.</param>
            <param name="filter">The filter.</param>
            <returns>IServiceReference[].</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.IServiceRegistry.LookupServiceReferences(Syncfusion.Addin.IBundleContext)">
            Performs a lookup for ServiceReferences that are bound to this
            ServiceRegistry using the specified BundleContext.
            @param context The BundleContext to lookup the ServiceReferences on.
            @return An array of all matching ServiceReferences or null if none
            exist.
            <summary>
            Lookups the service references.
            </summary>
            <param name="context">The context.</param>
            <returns>IServiceReference[].</returns>
        </member>
        <member name="T:Syncfusion.Addin.Core.IShell">
            <summary>
            Interface IShell
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.IShell.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.IShell.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Syncfusion.Addin.Core.IShell.Framework">
            <summary>
            Gets the framework.
            </summary>
            <value>The framework.</value>
        </member>
        <member name="M:Syncfusion.Addin.Core.IShell.Launch">
            <summary>
            Launches this instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.IShell.Setup">
            <summary>
            Gets the setup.
            </summary>
            <value>The setup.</value>
        </member>
        <member name="M:Syncfusion.Addin.Core.IShell.Shutdown">
            <summary>
            Shutdowns this instance.
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.AddinMetadata">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Runtime">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Implementation">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Reference">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Service">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Property">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.ApplicationMenu">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.PageService">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.AppSettings">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Name">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Title">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Description">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Company">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Copyright">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Product">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.AssemblyVersion">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Url">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.StartLevel">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Enabled">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Path">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.Immediate">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AddinMetadata.ImmediateSpecified">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.RuntimeInfo">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.RuntimeInfo.Items">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.RuntimeInfo.Items1">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.ImportInfo">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ImportInfo.Items">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ImportInfo.ItemsElementName">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ImportInfo.assembly">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ImportInfo.isweb">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.ItemsChoiceType">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.ItemsChoiceType.ConditionEvaluator">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.ItemsChoiceType.Doozer">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.Add">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.Add.key">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.Add.value">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.AppSettings">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.AppSettings.Items">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.PageNode">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.PageNode.PageName">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.PageNode.PagePlguinClassValue">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.PageNode.PageType">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.LoadType">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.LoadType.Web">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.LoadType.Wpf">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.LoadType.WinForm">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.PageService">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.PageService.Items">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.PageService.ServicePoint">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.LoadOtherContainerPanles">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.LoadOtherContainerPanles.TypePanel">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.LoadOtherContainerPanles.Caption">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.LoadOtherContainerPanles.DockType">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.LoadOtherContainerPanles.IsClose">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.LoadOtherContainerPanles.MainForm">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.PluginDockStyle">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.PluginDockStyle.DockRight">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.PluginDockStyle.DockLeft">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.PluginDockStyle.DockBottom">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.PluginDockStyle.DockTop">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.PluginDockStyle.DockFill">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.PluginDockStyle.ShowDialog">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.PluginDockStyle.DockVerticalLeft">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.PluginDockStyle.DockVerticalRight">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.PluginDockStyle.DockHorizontalTop">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.PluginDockStyle.DockHorizontalBottom">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.MenuInfo">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.MenuInfo.Items">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.MenuInfo.MenuIco">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.MenuInfo.Caption">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.MenuInfo.Group">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.MenuInfo.ToolTip">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.MenuInfo.ClassForm">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.MenuInfo.DockType">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.MenuInfo.Width">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.MenuInfo.WidthSpecified">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.MenuInfo.High">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.MenuInfo.HighSpecified">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.MenuInfo.Sort">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.MenuInfo.SortSpecified">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.ExtendsMenu">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ExtendsMenu.Items">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ExtendsMenu.ApplicationName">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ExtendsMenu.Language">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.ApplicationMenu">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ApplicationMenu.Items">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ApplicationMenu.ApplicationIco">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.PropertyInfo">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.PropertyInfo.Name">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.PropertyInfo.Value">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.PropertyInfo.Type">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.ProvideInfo">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ProvideInfo.Interface">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.ServiceInfo">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ServiceInfo.Items">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.ReferenceInfo">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ReferenceInfo.Name">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ReferenceInfo.Interface">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ReferenceInfo.Version">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ReferenceInfo.Bind">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ReferenceInfo.Unbind">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.ImplementationInfo">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.ImplementationInfo.Name">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.Dependency">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.Dependency.Items">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.Dependency.ItemsElementName">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.Dependency.BundleSymbolicName">
            <remarks/>
        </member>
        <member name="P:Syncfusion.Addin.Core.Metadata.Dependency.AssemblyName">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Metadata.ItemsChoiceType1">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.ItemsChoiceType1.ConditionEvaluator">
            <remarks/>
        </member>
        <member name="F:Syncfusion.Addin.Core.Metadata.ItemsChoiceType1.Doozer">
            <remarks/>
        </member>
        <member name="T:Syncfusion.Addin.Core.Reflection.AttributeInfo">
            <summary>
            Class AttributeInfo.
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.Reflection.AttributeInfo._owner">
            <summary>
            The _owner
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.Reflection.AttributeInfo._value">
            <summary>
            The _value
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Reflection.AttributeInfo.#ctor(System.Type,System.Attribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Core.Reflection.AttributeInfo"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="T:Syncfusion.Addin.Core.RegistrationState">
            <summary>
            Enum RegistrationState
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.RegistrationState.Registered">
            <summary>
            The registered
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.RegistrationState.Unregistering">
            <summary>
            The unregistering
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.RegistrationState.Unregistered">
            <summary>
            The unregistered
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Core.ServiceReference">
            <summary>
            服务引用
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceReference.registration">
            <summary>
            The registration
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceReference.bundle">
            <summary>
            The bundle
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.ServiceReference.Registration">
            <summary>
            Gets the registration.
            </summary>
            <value>The registration.</value>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceReference.#ctor(Syncfusion.Addin.Core.ServiceRegistration,Syncfusion.Addin.IBundle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Core.ServiceReference"/> class.
            </summary>
            <param name="registration">The registration.</param>
            <param name="bundle">The bundle.</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceReference.GetProperty(System.String)">
            <summary>
            获取属性
            </summary>
            <param name="key">关键字</param>
            <returns>Object</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceReference.GetPropertyKeys">
            <summary>
            获取所有属性
            </summary>
            <returns>数组</returns>
        </member>
        <member name="P:Syncfusion.Addin.Core.ServiceReference.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceReference.GetBundle">
            <summary>
            获取组件信息
            </summary>
            <returns>IBundle</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceReference.GetUsingBundles">
            <summary>
            获取使用的组件信息
            </summary>
            <returns>IBundle[]</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceReference.GetClasses">
            <summary>
            获取类的信息
            </summary>
            <returns>string[]</returns>
        </member>
        <member name="T:Syncfusion.Addin.Core.ServiceRegistration">
            <summary>
            Class ServiceRegistration.
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceRegistration.referance">
            <summary>
            The referance
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceRegistration.context">
            <summary>
            The context
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceRegistration.framework">
            <summary>
            The framework
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceRegistration.classes">
            <summary>
            The classes
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceRegistration.serviceId">
            <summary>
            The service identifier
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceRegistration.serviceObject">
            <summary>
            The service object
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceRegistration.factory">
            <summary>
            The factory
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceRegistration.available">
            <summary>
            The available
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceRegistration.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceRegistration.contextsUsing">
            <summary>
            The contexts using
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceRegistration.registrationLock">
            <summary>
            The registration lock
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.ServiceRegistration.Classes">
            <summary>
            Gets the classes.
            </summary>
            <value>The classes.</value>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistration.#ctor(Syncfusion.Addin.Core.BundleContext,System.String[],System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Core.ServiceRegistration"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="classes">The classes.</param>
            <param name="serviceObject">The service object.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistration.InitializeProperties(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes the properties.
            </summary>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistration.GetReference">
            <summary>
            得到引用
            </summary>
            <returns>IServiceReference</returns>
            <exception cref="T:System.NotSupportedException">Service is unregistered</exception>
        </member>
        <member name="P:Syncfusion.Addin.Core.ServiceRegistration.Properties">
            <summary>
            属性信息
            </summary>
            <value>The properties.</value>
            <exception cref="T:System.NotSupportedException">Service is unregistered.</exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistration.Unregister">
            <summary>
            卸载
            </summary>
            <exception cref="T:System.NotSupportedException">Service is unregistered</exception>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistration.GetUsingBundles">
            <summary>
            Gets the using bundles.
            </summary>
            <returns>IBundle[].</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistration.GetService(Syncfusion.Addin.Core.BundleContext)">
            <summary>
            Gets the service.
            </summary>
            <param name="user">The user.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistration.UngetService(Syncfusion.Addin.Core.BundleContext)">
            <summary>
            Ungets the service.
            </summary>
            <param name="user">The user.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistration.ReleaseService(Syncfusion.Addin.Core.BundleContext)">
            <summary>
            Releases the service.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistration.UngetServiceInternal">
            <summary>
            Ungets the service internal.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Syncfusion.Addin.Core.ServiceRegistry">
            <summary>
            Class ServiceRegistry.
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceRegistry.PublishedServicesByClass">
            Published services by class name. Key is a String class name; Value is a ArrayList of ServiceRegistrations 
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceRegistry.AllPublishedServices">
            All published services. Value is ServiceRegistrations 
        </member>
        <member name="F:Syncfusion.Addin.Core.ServiceRegistry.PublishedServicesByContext">
            Published services by BundleContext.  Key is a BundleContext; Value is a ArrayList of ServiceRegistrations
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Core.ServiceRegistry"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistry.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistry.PublishService(Syncfusion.Addin.IBundleContext,Syncfusion.Addin.IServiceRegistration)">
            <summary>
            Publishes the service.
            </summary>
            <param name="context">The context.</param>
            <param name="serviceRegistration">The service registration.</param>
            Publishes a service to this ServiceRegistry.
            @param context the BundleContext that registered the service.
            @param serviceReg the ServiceRegistration to register.
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistry.UnpublishService(Syncfusion.Addin.IBundleContext,Syncfusion.Addin.IServiceRegistration)">
            <summary>
            Unpublishes the service.
            </summary>
            <param name="context">The context.</param>
            <param name="serviceRegistration">The service registration.</param>
            Unpublishes a service from this ServiceRegistry
            @param context the BundleContext that registered the service.
            @param serviceReg the ServiceRegistration to unpublish.
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistry.UnpublishServices(Syncfusion.Addin.IBundleContext)">
            <summary>
            Unpublishes the services.
            </summary>
            <param name="context">The context.</param>
            Unpublishes all services from this ServiceRegistry that the
            specified BundleContext registered.
            @param context the BundleContext to unpublish all services for.
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistry.LookupServiceReferences(System.String,Syncfusion.Addin.IFilter)">
            <summary>
            Lookups the service references.
            </summary>
            <param name="clazz">The clazz.</param>
            <param name="filter">The filter.</param>
            <returns>IServiceReference[].</returns>
            Performs a lookup for ServiceReferences that are bound to this
            ServiceRegistry. If both clazz and filter are null then all bound
            ServiceReferences are returned.
            @param clazz A fully qualified class name.  All ServiceReferences that
            reference an object that implement this class are returned.  May be
            null.
            @param filter Used to match against published Services.  All
            ServiceReferences that match the filter are returned.  If a clazz is
            specified then all ServiceReferences that match the clazz and the
            filter parameter are returned. May be null.
            @return An array of all matching ServiceReferences or null
            if none exist.
        </member>
        <member name="M:Syncfusion.Addin.Core.ServiceRegistry.LookupServiceReferences(Syncfusion.Addin.IBundleContext)">
            <summary>
            Lookups the service references.
            </summary>
            <param name="context">The context.</param>
            <returns>IServiceReference[].</returns>
            Performs a lookup for ServiceReferences that are bound to this
            ServiceRegistry using the specified BundleContext.
            @param context The BundleContext to lookup the ServiceReferences on.
            @return An array of all matching ServiceReferences or null if none
            exist.
        </member>
        <member name="T:Syncfusion.Addin.Core.ServicesImp.BundleFactory">
            <summary>
            组件
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.ServicesImp.BundleFactory.Framework">
            <summary>
            框架
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.ServicesImp.BundleFactory.InitialBundleId">
            <summary>
            初始化ID
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.ServicesImp.BundleFactory.MaxBundleId">
            <summary>
            最大ID
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.ServicesImp.BundleFactory.CreateBundle(Syncfusion.Addin.Configuration.Plugin.BundleData)">
            <summary>
            创建组件
            </summary>
            <param name="bundleData">组件数据</param>
            <returns>IBundle</returns>
        </member>
        <member name="T:Syncfusion.Addin.Core.ServicesImp.ServiceManager">
            <summary>
            服务管理
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Core.ServicesImp.DictionaryLocker`2">
            <summary>
            字典
            </summary>
            <typeparam name="TKey">KEY 键</typeparam>
            <typeparam name="TValue">Value 值</typeparam>
        </member>
        <member name="T:Syncfusion.Addin.Core.ServicesImp.ThreadSafeDictionary`2">
            <summary>
            线程安全
            </summary>
            <typeparam name="TKey">Key</typeparam>
            <typeparam name="TValue">Value</typeparam>
        </member>
        <member name="T:Syncfusion.Addin.Core.Services.IServiceManager">
            <summary>
            组件服务管理器
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Services.IServiceManager.AddService(Syncfusion.Addin.IBundle,System.Type,System.Object[])">
            <summary>
            服务添加管理器
            </summary>
            <param name="owner">组件</param>
            <param name="serviceType">服务类型</param>
            <param name="serviceInstances">服务实例对像</param>
        </member>
        <member name="T:Syncfusion.Addin.Core.Services.Preferences">
            <summary>
             A class that holds the application preferences (using singletons)
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.Services.Preferences.Instance">
            <summary>
             The current preferences
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.Services.Preferences.Default">
            <summary>
             The default preferences
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.Services.Preferences.Item(System.String)">
            <summary>
             Get or Set the value of a preference
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Services.Preferences.Save(System.String)">
            <summary>
             Save preferences to an Xml file
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Services.Preferences.Load(System.String)">
            <summary>
             Load preferences from an Xml file
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Services.Preferences.Load(Syncfusion.Addin.Core.Services.Preferences)">
            <summary>
             Load preferences from another Preferences instance
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.Services.Preferences.Display">
            <summary>
             Display preferences
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.Services.PreferencesProxy.Enable">
            <summary>
             Enable or disable emission of the Changed event
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Core.ShellSetup">
            <summary>
            Class ShellSetup.
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Core.ShellSetup.ConsoleArgs">
            <summary>
            Gets or sets the console arguments.
            </summary>
            <value>The console arguments.</value>
        </member>
        <member name="T:Syncfusion.Addin.Core.SystemBundle">
            <summary>
            Class SystemBundle. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.SystemBundle.#ctor(Syncfusion.Addin.Core.Framework)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Core.SystemBundle"/> class.
            </summary>
            <param name="framework">The framework.</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.SystemBundle.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.SystemBundle.OnBundleEvent(System.Object,Syncfusion.Addin.BundleEventArgs)">
            <summary>
            Handles the <see cref="E:BundleEvent" /> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Syncfusion.Addin.BundleEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.SystemBundle.Start">
            <summary>
            Start Bundle
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.SystemBundle.Update">
            <summary>
            Bundle Update
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.SystemBundle.Update(System.IO.Stream)">
            <summary>
            Bundle Update with Stream
            </summary>
            <param name="inputStream">The input stream.</param>
        </member>
        <member name="M:Syncfusion.Addin.Core.SystemBundle.Uninstall">
            <summary>
            Bundle Uninstall
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Core.SystemBundle.GetProperties">
            <summary>
            Bundle GetProperties
            </summary>
            <returns>Dictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="T:Syncfusion.Addin.BundleState">
            <summary>
            Defines the Bundle's states.
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.BundleState.Uninstalled">
            <summary>
            Uninstalled
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.BundleState.Installed">
            <summary>
            Installed
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.BundleState.Resolved">
            <summary>
            Resolved
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.BundleState.Starting">
            <summary>
            Starting
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.BundleState.Stopping">
            <summary>
            Stopping
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.BundleState.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.BundleTransition">
            <summary>
            Enum BundleTransition
            </summary>
        </member>
        <!-- 对于成员“F:Syncfusion.Addin.BundleTransition.Installed”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.BundleTransition.Started”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.BundleTransition.Stopped”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.BundleTransition.Updated”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.BundleTransition.Uninstalled”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.BundleTransition.Resolved”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.BundleTransition.Unresolved”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.BundleTransition.Starting”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.BundleTransition.Stopping”忽略有格式错误的 XML 注释 -->
        <member name="T:Syncfusion.Addin.Configuration.Plugin.ApplicationExtensionData">
            <summary>
            应用程序扩展信息
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.Plugin.ApplicationExtensionData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Configuration.Plugin.ApplicationExtensionData"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ApplicationExtensionData.ApplicationIco">
            <summary>
            应用程序图标
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ApplicationExtensionData.ApplicationName">
            <summary>
            应用程序名称
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ApplicationExtensionData.Language">
            <summary>
            语言
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ApplicationExtensionData.MenuList">
            <summary>
            菜单
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Plugin.ActivatorPolicy">
            <summary>
            Enum ActivatorPolicy
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Configuration.Plugin.ActivatorPolicy.Immediate">
            <summary>
            及时加载
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Configuration.Plugin.ActivatorPolicy.Lazy">
            <summary>
            延迟加载
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Plugin.ActivatorData">
            <summary>
            组件加载
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ActivatorData.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ActivatorData.Policy">
            <summary>
            加载方式
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Plugin.AssemblyData">
            <summary>
            程序集信息
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.AssemblyData.AssemblyPatch">
            <summary>
            程序集路经
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.AssemblyData.IsWeb">
            <summary>
            是否Web应用程序
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Plugin.BundleData">
            <summary>
            组件数据
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.ExtensionPoints">
            <summary>
            扩展点信息
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Extensions">
            <summary>
            扩展数据
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.SymbolicName">
            <summary>
            符号名称
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.BundleInfo">
            <summary>
            组件数据信息
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Activator">
            <summary>
            模块信息
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Runtime">
            <summary>
            运行组件信息
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.PageSerivce">
            <summary>
            页面服务数据
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Services">
            <summary>
            服务接口
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Path">
            <summary>
            路经
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Enable">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Immediate">
            <summary>
            是否即时加载
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Id">
            <summary>
            编号
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Location">
            <summary>
            文件本地位置
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Product">
            <summary>
            Gets or sets the product.
            </summary>
            <value>The product.</value>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Company">
            <summary>
            Gets or sets the company.
            </summary>
            <value>The company.</value>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.Copyright">
            <summary>
            Gets or sets the copyright.
            </summary>
            <value>The copyright.</value>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleData.ApplicationIco">
            <summary>
            Gets or sets the application icon.
            </summary>
            <value>The application icon.</value>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Plugin.BundleInfoData">
            <summary>
            组件信息
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleInfoData.Description">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleInfoData.Author">
            <summary>
            作者信息
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleInfoData.ContactAddress">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleInfoData.Copyright">
            <summary>
            版权
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleInfoData.Company">
            <summary>
            公司
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleInfoData.Product">
            <summary>
            产品
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleInfoData.AssemblyVersion">
            <summary>
            程序集版本
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleInfoData.FileVersion">
            <summary>
            文件版本
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.BundleInfoData.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Plugin.DependencyData">
            <summary>
            依赖数据
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.DependencyData.BundleSymbolicName">
            <summary>
            组件名称
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.DependencyData.AssemblyName">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Plugin.ExtensionData">
            <summary>
            扩展数据
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ExtensionData.ApplicationExtends">
            <summary>
            应用程序扩展信息
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ExtensionData.ApplicationIco">
            <summary>
            图标信息
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.Plugin.ExtensionData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Configuration.Plugin.ExtensionData"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Plugin.ExtensionPointData">
            <summary>
            扩展点数据
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ExtensionPointData.ChildNodes">
            <summary>
            XML子节点信息
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ExtensionPointData.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.Plugin.ExtensionPointData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Configuration.Plugin.ExtensionPointData"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Plugin.ExtendionMenu">
            <summary>
            程序菜单信息
            </summary>
        </member>
        <!-- 对于成员“P:Syncfusion.Addin.Configuration.Plugin.ExtendionMenu.Width”忽略有格式错误的 XML 注释 -->
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ExtendionMenu.High">
            <summary>
            设置高度
            </summary>
            <value>The high.</value>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ExtendionMenu.Sort">
            <summary>
            排序
            </summary>
            <value>The sort.</value>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ExtendionMenu.PluginDockStyle">
            <summary>
            窗口停靠样式
            </summary>
            <value>The plugin dock style.</value>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ExtendionMenu.ClassForm">
            <summary>
            窗口名称
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ExtendionMenu.MenuIco">
            <summary>
            图标
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ExtendionMenu.Caption">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ExtendionMenu.Group">
            <summary>
            组
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ExtendionMenu.ToolTip">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Plugin.PageServiceData">
            <summary>
            起始页面管理服务
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.PageServiceData.PageServicePoint">
            <summary>
            页面信息
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.PageServiceData.PageNodeList">
            <summary>
            页面列表
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.Plugin.PageServiceData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Configuration.Plugin.PageServiceData"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Plugin.RuntimeData">
            <summary>
            运行数据信息
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.RuntimeData.Dependencies">
            <summary>
            依赖对像信息
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.RuntimeData.Assemblie">
            <summary>
            模块信息
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.Plugin.RuntimeData.SetAssembly(Syncfusion.Addin.Configuration.Plugin.AssemblyData)">
            <summary>
            设置程序集信息
            </summary>
            <param name="assembly">程序集数据元素</param>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.Plugin.RuntimeData.AddDependency(Syncfusion.Addin.Configuration.Plugin.DependencyData)">
            <summary>
            依赖对像信息
            </summary>
            <param name="newItem">DependencyData </param>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Plugin.ServiceData">
            <summary>
            服务数据信息
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ServiceData.Interfaces">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Plugin.ServiceData.Type">
            <summary>
            服务类型
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Loggin.FileLog">
            <summary>
            Class FileLog.
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Loggin.ILogginContext">
            <summary>
            Interface ILogginContext
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Loggin.Log">
            <summary>
            Class Log.
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Loggin.LoggerMsg">
            <summary>
            Class LoggerMsg.
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Loggin.LogLevelUtils">
            <summary>
            日志等级
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Loggin.NullLog">
            <summary>
            Class NullLog.
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Loggin.TextWriterLog">
            <summary>
            文件写入
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Configuration.Loggin.TextWriterLog.Writer">
            <summary>
            Gets or sets the writer.
            </summary>
            <value>The writer.</value>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.Loggin.TextWriterLog.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Configuration.Loggin.TextWriterLog"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.Loggin.TextWriterLog.#ctor(System.IO.TextWriter,Syncfusion.Addin.Configuration.Loggin.TextWriterResponsibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Configuration.Loggin.TextWriterLog"/> class.
            </summary>
            <param name="writer">The writer.</param>
            <param name="responsibility">The responsibility.</param>
            <exception cref="T:System.ArgumentNullException">writer</exception>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.Loggin.TextWriterLog.WriteLine(System.String,Syncfusion.Addin.Configuration.Loggin.LogLevel)">
            <summary>
            Writes the line.
            </summary>
            <param name="message">The message.</param>
            <param name="level">The level.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.Loggin.TextWriterResponsibility">
            <summary>
            Enum TextWriterResponsibility
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Configuration.Loggin.TextWriterResponsibility.Owns">
            <summary>
            The owns
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Configuration.Loggin.TextWriterResponsibility.DoesNotOwn">
            <summary>
            The does not own
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Configuration.Loggin.TextWriterResponsibility.MyTwos">
            <summary>
            My twos
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Configuration.Loggin.TextWriterResponsibility.AnyThings">
            <summary>
            Any things
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Configuration.PluginXmlProcess">
            <summary>
            插件文件读取信息
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.PluginXmlProcess.SearchXml(System.String)">
            <summary>
            Search *.addin for dirName
            搜索文件下面为*.addin 文件
            </summary>
            <returns>错误返回NULL</returns>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.PluginXmlProcess.FileName(System.IO.DirectoryInfo)">
            <summary>
            Files the name. </summary>
            <param name="dir">The dir.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.PluginXmlProcess.GetXmlForBundleData(System.String)">
            <summary>
            Get Xml For BundleData
            </summary>
            <param name="dirName">Name of the dir.</param>
            <returns>BundleData.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.PluginXmlProcess.GetBundleInfoData(Syncfusion.Addin.Core.Metadata.AddinMetadata)">
            <summary>
            获取组件信息
            </summary>
            <param name="metadata">数据元素</param>
            <returns>BundleInfoData</returns>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.PluginXmlProcess.GetActivatorData(Syncfusion.Addin.Core.Metadata.AddinMetadata)">
            <summary>
            获取插件加载信息
            </summary>
            <param name="metadata">数据元素</param>
            <returns>ActivatorData</returns>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.PluginXmlProcess.GetXmlForExtensionData(Syncfusion.Addin.Core.Metadata.AddinMetadata)">
            <summary>
            获取XML扩张数据信息
            </summary>
            <param name="metadata">The metadata.</param>
            <returns>ExtensionData</returns>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.PluginXmlProcess.GetXmlForPageServiceData(Syncfusion.Addin.Core.Metadata.AddinMetadata)">
            <summary>
            Gets the XML for page service data.
            </summary>
            <param name="metadata">The metadata.</param>
            <returns>PageServiceData.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.PluginXmlProcess.GetRuntimeDataForRuntimeData(Syncfusion.Addin.Core.Metadata.AddinMetadata)">
            <summary>
            Get Runtime Data For RuntimeData
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.PluginXmlProcess.GetDependencyForRuntimeData(Syncfusion.Addin.Configuration.Plugin.RuntimeData,Syncfusion.Addin.Core.Metadata.AddinMetadata)">
            <summary>
            Get Dependency For RuntimeData
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.PluginXmlProcess.GetAssemblyDataForRuntimeData(Syncfusion.Addin.Configuration.Plugin.RuntimeData,Syncfusion.Addin.Core.Metadata.AddinMetadata)">
            <summary>
            Get Assembly Data For RuntimeData
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.Configuration.PluginXmlProcess.GetBundleDatas">
            <summary>
            Get Bundle Datas
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Syncfusion.Addin.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data)
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Syncfusion.Addin.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Syncfusion.Addin.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:Syncfusion.Addin.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:Syncfusion.Addin.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:Syncfusion.Addin.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Syncfusion.Addin.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Properties.Resources.AtLeastOnePluginsPathMustBeSpecified">
            <summary>
              Looks up a localized string similar to AtLeastOnePluginsPathMustBeSpecified!.
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Properties.Resources.BundleContext_RegisterService_SERVICE_ARGUMENT_NULL_EXCEPTION">
            <summary>
              Looks up a localized string similar to SERVICE_ARGUMENT_NULL_EXCEPTION.
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Properties.Resources.BundleContext_RegisterService_Service_is_not_instance_of_class">
            <summary>
              Looks up a localized string similar to Service is not instance of class.
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Properties.Resources.LogFileOverflow">
            <summary>
              Looks up a localized string similar to Log File Overflow!!!.
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Properties.Resources.SingletonNO">
            <summary>
              Looks up a localized string similar to Singleton No Allowed!.
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.Properties.Resources.TopAssemlyError">
            <summary>
              Looks up a localized string similar to toplevelAssemb is null ,maybe is not web app,plase use PluginManage.WinAppLaunch() again!.
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.Utility.AssertUtility">
            <summary>
            Class AssertUtility. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Utility.AssertUtility.IsTrue(System.Boolean)">
            <summary>
            Determines whether the specified value is true.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Syncfusion.Addin.Utility.AssertUtility.IsTrue(System.Boolean,System.String)">
            <summary>
            Determines whether the specified value is true.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="msg">The MSG.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Utility.AssertUtility.EnumDefined(System.Type,System.Object,System.String)">
            <summary>
            Enums the defined.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="enumValue">The enum value.</param>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Utility.AssertUtility.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Arguments the not null.
            </summary>
            <param name="argument">The argument.</param>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Utility.AssertUtility.NotNull(System.Object,System.String)">
            <summary>
            Nots the null.
            </summary>
            <param name="member">The member.</param>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Utility.AssertUtility.NotNull(System.Object)">
            <summary>
            Nots the null.
            </summary>
            <param name="member">The member.</param>
            <exception cref="T:System.Exception">Invalid value.</exception>
        </member>
        <member name="M:Syncfusion.Addin.Utility.AssertUtility.ArgumentNotNull(System.Object,System.String,System.String)">
            <summary>
            Arguments the not null.
            </summary>
            <param name="argument">The argument.</param>
            <param name="name">The name.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Utility.AssertUtility.ArgumentHasText(System.String,System.String)">
            <summary>
            Arguments the has text.
            </summary>
            <param name="argument">The argument.</param>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Utility.AssertUtility.ArgumentHasText(System.String,System.String,System.String)">
            <summary>
            Arguments the has text.
            </summary>
            <param name="argument">The argument.</param>
            <param name="name">The name.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Utility.AssertUtility.ArgumentAssignableFrom(System.Object,System.Type,System.String)">
            <summary>
            Arguments the assignable from.
            </summary>
            <param name="argument">The argument.</param>
            <param name="BaseType">Type of the base.</param>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Utility.AssertUtility.ArgumentAssignableFrom(System.Object,System.Type,System.String,System.String)">
            <summary>
            Arguments the assignable from.
            </summary>
            <param name="argument">The argument.</param>
            <param name="BaseType">Type of the base.</param>
            <param name="name">The name.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Utility.AssertUtility.ArgumentSameType(System.Object,System.Type,System.String)">
            <summary>
            Arguments the type of the same.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentType">Type of the argument.</param>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Utility.AssertUtility.ArgumentSameType(System.Object,System.Type,System.String,System.String)">
            <summary>
            Arguments the type of the same.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentType">Type of the argument.</param>
            <param name="name">The name.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Syncfusion.Addin.Utility.FileHelper">
            <summary>
            文件帮助
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Utility.FileHelper.FileCopyToDynamicDirectory(System.String)">
            <summary>
            File Copy To Dynamic Directory
            </summary>
            <returns>File path</returns>
        </member>
        <member name="M:Syncfusion.Addin.Utility.FileHelper.CopyFiles(System.String,System.String)">
            <summary>
            Copy Files
            </summary>
            <param name="sourcedir">source dir</param>
            <param name="targetdir">target dir</param>
        </member>
        <member name="M:Syncfusion.Addin.Utility.FileHelper.SearchDir">
            <summary>
            Search Dir for web application`s "Plugins"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.Utility.FileHelper.GetComponentDirectory(System.String)">
            <summary>
            Get Component Directory
            </summary>
            <param name="filepatch">file patch</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.Utility.FileHelper.SearchXml(System.String,System.String)">
            <summary>
            Search Bundle`s *.addin file
            </summary>
            <returns>错误返回NULL</returns>
        </member>
        <member name="T:Syncfusion.Addin.Utility.FileLogUtility">
            <summary>
            日志信息查看
            </summary>
            <example>
            Using Syncfusion.Addin.Utility;
            FileLogUtility.Error(ex.Message);
            </example>
        </member>
        <member name="M:Syncfusion.Addin.Utility.FileLogUtility.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Addin.Utility.FileLogUtility"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Utility.FileLogUtility.SetLogLevel(Syncfusion.Addin.Configuration.Loggin.LogLevel)">
            <summary>
            Sets the log level.
            </summary>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Addin.Utility.FileLogUtility.CurrentDomainUnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Currents the domain unhandled exception.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.UnhandledExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Addin.Utility.FileLogUtility.SetMaxFileSizeByMb(System.Int32)">
            <summary>
            设置文件上限大小
            </summary>
            <param name="sizeMb"></param>
        </member>
        <member name="M:Syncfusion.Addin.Utility.FileLogUtility.Debug(System.String)">
            <summary>
            调试日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Syncfusion.Addin.Utility.NetworkHelper">
            <summary>
            This class contains various useful features for detecting network state
            </summary>
        </member>
        <member name="E:Syncfusion.Addin.Utility.NetworkHelper.NetworkAddressChanged">
            <summary>
            Occurs when the IP Address of a network interface changes
            </summary>
            <remarks>
            This event is provided for consistency only.
            It simply passes through to NetworkChange.NetworkAddressChanged
            </remarks>
        </member>
        <member name="E:Syncfusion.Addin.Utility.NetworkHelper.NetworkAvailabilityChanged">
            <summary>
            Occurs when the availability of a network changes
            </summary>
            <remarks>
            This event is provided for consistency only.
            It simply passes through to NetworkChange.NetworkAvailabilityChanged
            </remarks>
        </member>
        <member name="P:Syncfusion.Addin.Utility.NetworkHelper.NetworkAvailable">
            <summary>
            Gets a value indicating whether a valid network conneciton is available
            </summary>
            <value><c>true</c> if [network available]; otherwise, <c>false</c>.</value>
            <example>
            if (NetworkHelper.NetworkAvailable)
            {
                // ... do something
            }
            </example>
        </member>
        <member name="P:Syncfusion.Addin.Utility.NetworkHelper.InternetConnectionAvailable">
            <summary>
            Gets a value indicating whether a connection to the Internet is available
            </summary>
            <value>
            	<c>true</c> if an Internet connection is available..
            </value>
            <example>
            if (NetworkHelper.InternetConnectionAvailable)
            {
                // ... do something
            }
            </example>
        </member>
        <member name="P:Syncfusion.Addin.Utility.NetworkHelper.FastestConnectionSpeed">
            <summary>
            Gets the speed of the fastest available connection in bits per second.
            </summary>
            <value>Connection speed.</value>
            <remarks>
            Tunnel and Loopback adapters are ignored.
            </remarks>
            <example>
            if (NetworkHelper.FastestConnectionSpeed &gt;= 54000000)
            {
                // ... download something large
            }
            else
            {
                MessageBox.Show("You need at least an 802.11a connection (or better) for this feature.");
            }
            </example>
        </member>
        <member name="P:Syncfusion.Addin.Utility.NetworkHelper.AllIPAddresses">
            <summary>
            Gets all the IP addresses (IPv4) utilized by the current system.
            </summary>
            <value>All IP addresses.</value>
            <remarks>
            Only IPv4 addresses are included.
            Tunnel and Loopback adapters are ignored.
            Only adapters that are up are considered.
            </remarks>
            <example>
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("IP Addresses used by this system:");
            foreach (IPAddressInformation address in NetworkHelper.AllIPAddresses)
            {
                sb.AppendLine(address.Address.ToString());
            }
            MessageBox.Show(sb.ToString());
            </example>
        </member>
        <member name="P:Syncfusion.Addin.Utility.NetworkHelper.AllIPAddressesClearText">
            <summary>
            Gets all the IP addresses (IPv4) utilized by the current system in clear text representation.
            </summary>
            <value>All IP addresses.</value>
            <remarks>
            Only IPv4 addresses are included.
            Tunnel and Loopback adapters are ignored.
            Only adapters that are up are considered.
            </remarks>
            <example>
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("IP Addresses used by this system:");
            foreach (string address in NetworkHelper.AllIPAddressesClearText)
            {
                sb.AppendLine(address);
            }
            MessageBox.Show(sb.ToString());
            </example>
        </member>
        <member name="P:Syncfusion.Addin.Utility.NetworkHelper.CurrentIPAddressClearText">
            <summary>
            Gets the system's current IP address (IPv4) in clear text.
            </summary>
            <value>The current ip address.</value>
            <remarks>
            If the system currently uses multiple IP addresses, the first unicast address
            on the fastest adapter will be returned.
            </remarks>
            <example>
            MessageBox.Show("Current IP Address: " + NetworkHelper.CurrentIPAddressClearText);
            </example>
        </member>
        <member name="P:Syncfusion.Addin.Utility.NetworkHelper.CurrentIPAddress">
            <summary>
            Gets the system's current IP address (IPv4).
            </summary>
            <value>The current ip address.</value>
            <remarks>
            If the system currently uses multiple IP addresses, the first unicast address
            on the fastest adapter will be returned.
            </remarks>
            <example>
            MessageBox.Show("Current IP Address: " + NetworkHelper.CurrentIPAddress.Address.ToString());
            </example>
        </member>
        <member name="P:Syncfusion.Addin.Utility.NetworkHelper.AllCurrentDomains">
            <summary>
            Gets a collection of all current domains we are connected to.
            </summary>
            <value>All current domains.</value>
            <example>
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("Current domains:");
            foreach (string domain in NetworkHelper.AllCurrentDomains)
            {
                sb.AppendLine(domain);
            }
            MessageBox.Show(sb.ToString());
            </example>
        </member>
        <member name="M:Syncfusion.Addin.Utility.NetworkHelper.CurrentlyConnectedToDomain(System.String)">
            <summary>
            Returns true, if the system is currently connected to the specified domain.
            </summary>
            <param name="domain">The domain (case insensitive).</param>
            <returns>True if connected to the domain.</returns>
            <example>
            if (NetworkHelper.CurrentlyConnectedToDomain("mydomain"))
            {
                // ... do something with it
            }
            </example>
        </member>
        <member name="M:Syncfusion.Addin.Utility.NetworkHelper.CanConnect(System.String)">
            <summary>
            Determines whether it is possible to connect to the specified host.
            </summary>
            <param name="host">The host.</param>
            <returns>
            	<c>true</c> if this instance can connect the specified host; otherwise, <c>false</c>.
            </returns>
            <example>
            if (NetworkHelper.CanConnect("www.Microsoft.com"))
            {
            // ... do something with the connection
            }
            </example>
            <remarks>Port 80 is used to make the connection attempt.</remarks>
        </member>
        <member name="M:Syncfusion.Addin.Utility.NetworkHelper.CanConnect(System.String,System.Int32)">
            <summary>
            Determines whether it is possible to connect to the specified host.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <returns>
            	<c>true</c> if this instance can connect the specified host; otherwise, <c>false</c>.
            </returns>
            <example>
            if (NetworkHelper.CanConnect("www.Microsoft.com", 80))
            {
                // ... do something with the connection
            }
            </example>
        </member>
        <member name="M:Syncfusion.Addin.Utility.NetworkHelper.GetAllAddressesForAdapter(System.Net.NetworkInformation.IPInterfaceProperties)">
            <summary>
            Gets all addresses for an adapter.
            </summary>
            <param name="interfaceProperties">The interface properties.</param>
            <returns>List of IP Addresses</returns>
            <remarks>For internal use only</remarks>
        </member>
        <member name="M:Syncfusion.Addin.Utility.NetworkHelper.CanConnectFromAddress(System.Net.IPAddress,System.Collections.Generic.IEnumerable{System.Net.NetworkInformation.IPAddressInformation},System.Net.IPHostEntry,System.Int32)">
            <summary>
            Determines whether it is possible to connect to the specified local host address.
            </summary>
            <param name="localHostAddress">The local host address.</param>
            <param name="adapterAddressList">The adapter address list.</param>
            <param name="remoteHostEntry">The remote host entry.</param>
            <param name="port">The port.</param>
            <returns>true if this instance can connect from the specified local host addr; otherwise false.</returns>
            <remarks>For internal use only</remarks>
        </member>
        <member name="M:Syncfusion.Addin.Utility.NetworkHelper.CanConnectFromEndPoint(System.Net.EndPoint,System.Net.IPHostEntry,System.Int32)">
            <summary>
            Determines whether it is possible to connect to the remote host from the specified endpoint.
            </summary>
            <param name="localEndPoint">The local end point.</param>
            <param name="remoteHostEntry">The remote host entry.</param>
            <param name="port">The port.</param>
            <returns>
            	<c>true</c> if this instance [can connect from end point] the specified local EP; otherwise, <c>false</c>.
            </returns>
            <remarks>For internal use only</remarks>
        </member>
        <member name="T:Syncfusion.Addin.Utility.ReflectionUtil">
            <summary>
            Class ReflectionUtil.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Utility.ReflectionUtil.GetAssemblyFilename(System.Reflection.Assembly)">
            <summary>
            获取程序目录
            </summary>
            <param name="assembly">程序集</param>
            <returns>文件路经</returns>
        </member>
        <member name="M:Syncfusion.Addin.Utility.ReflectionUtil.GetAssemblyVersion(System.Reflection.Assembly)">
            <summary>
            获取程序的版本信息
            </summary>
            <param name="assembly">程序集</param>
            <returns>返回版本号   如：1.0.0.0</returns>
        </member>
        <member name="M:Syncfusion.Addin.Utility.ReflectionUtil.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
            <summary>
            获取自定义属性信息
            </summary>
            <param name="assembly">程序集</param>
            <param name="attribute">类型</param>
            <returns>AttributeInfo[] 数组</returns>
        </member>
        <member name="T:Syncfusion.Addin.Utility.StringTokenizer">
            <summary>
            Class StringTokenizer.
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Utility.StringTokenizer.DefaultDelimiters">
            <summary>
            The default delimiters
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Utility.StringTokenizer.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Utility.StringTokenizer.delimiters">
            <summary>
            The delimiters
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Utility.StringTokenizer.returnDelims">
            <summary>
            The return delims
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Utility.StringTokenizer.splitValues">
            <summary>
            The split values
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Utility.StringTokenizer.isInitialized">
            <summary>
            The is initialized
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.Utility.StringTokenizer.thisLock">
            <summary>
            The this lock
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Utility.StringTokenizer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Utility.StringTokenizer"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Addin.Utility.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Utility.StringTokenizer"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="delim">The delimiter.</param>
        </member>
        <member name="M:Syncfusion.Addin.Utility.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Addin.Utility.StringTokenizer"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="delim">The delimiter.</param>
            <param name="returnDelims">if set to <c>true</c> [return delims].</param>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:Syncfusion.Addin.Utility.StringTokenizer.InitializeToken">
            <summary>
            Initializes the token.
            </summary>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:Syncfusion.Addin.Utility.StringTokenizer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Syncfusion.Addin.Utility.StringTokenizer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Syncfusion.Addin.Utility.XmlConvertor">
            <summary>
            XML文件转换
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.Utility.XmlConvertor.ObjectToXml(System.Object)">
            <summary>
            序列号对像为字符串 serialize an object to string.
            </summary>
            <param name="obj">
             对像 the object.
            </param>
            <returns>
            返回序列化字符串  the serialized string.
            </returns>
        </member>
        <member name="M:Syncfusion.Addin.Utility.XmlConvertor.ObjectToXml(System.Object,System.Boolean)">
            <summary>
            序列号对像为字符串  serialize an object to string.
            </summary>
            <param name="obj">
            对像 the object.
            </param>
            <param name="toBeIndented">
            是否被缩进。     whether to be indented.
            </param>
        </member>
        <member name="M:Syncfusion.Addin.Utility.XmlConvertor.XmlToObject(System.Type,System.String)">
            <summary>
            反序列化一个对象  deserialize string.to an object.
            </summary>
            <param name="type">
            the type of the object.
            </param>
            <param name="xml">
            字符串需要反序列化。
            </param>
            <returns>
            反序列化的对象。
            </returns>
        </member>
        <member name="T:Syncfusion.Addin.FrameworkEventArgs">
            <summary>
            Class FrameworkEventArgs.
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.FrameworkEventArgs.Bundle">
            <summary>
            组件对象
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.FrameworkEventArgs.State">
            <summary>
            组件框架状态
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.FrameworkEventArgs.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.FrameworkEventArgs.#ctor(Syncfusion.Addin.IBundle,Syncfusion.Addin.FrameworkState,System.Exception)">
            <summary>
            框架事件
            </summary>
            <param name="bundle">组件对象</param>
            <param name="state">状态</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="T:Syncfusion.Addin.FrameworkEventHandler">
            <summary>
            Prototype of the method to be implemented to receive framework events.
            </summary>
            <param name="sender">The event sender</param>
            <param name="e">The event argurment <see cref="T:Syncfusion.Addin.FrameworkEventArgs"/></param>
        </member>
        <member name="T:Syncfusion.Addin.FrameworkState">
            <summary>
            Enum FrameworkState
            </summary>
        </member>
        <!-- 对于成员“F:Syncfusion.Addin.FrameworkState.Started”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.FrameworkState.Error”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.FrameworkState.PackagesRefreshed”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.FrameworkState.StartLevelChanged”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.FrameworkState.Warning”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.FrameworkState.Info”忽略有格式错误的 XML 注释 -->
        <member name="T:Syncfusion.Addin.FrameworkUtil">
            <summary>
            框架管理
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.FrameworkUtil.FrameworkUtilClassPath">
            <summary>
            Framework Util Class Path
            </summary>
        </member>
        <member name="F:Syncfusion.Addin.FrameworkUtil.createFilter">
            <summary>
            create Filter
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.FrameworkUtil.CreateFilter(System.String)">
            <summary>
            Create Filter
            </summary>
            <param name="filter">filter String</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Addin.ServiceEventHandler">
            <summary>
            Prototype of the method to be implemented to receive service events.
            </summary>
            <param name="sender">The event sender</param>
            <param name="e">The event argurment <see cref="T:Syncfusion.Addin.ServiceEventArgs"/></param>
        </member>
        <member name="T:Syncfusion.Addin.ServiceEventArgs">
            <summary>
            服务事件参数
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.ServiceEventArgs.Reference">
            <summary>
            服务引用
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.ServiceEventArgs.State">
            <summary>
            服务状态
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.ServiceState">
            <summary>
            Enum ServiceState
            </summary>
        </member>
        <!-- 对于成员“F:Syncfusion.Addin.ServiceState.Registered”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.ServiceState.Modified”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“F:Syncfusion.Addin.ServiceState.Unregistering”忽略有格式错误的 XML 注释 -->
        <member name="T:Syncfusion.Addin.IBundle">
            <summary>
            IBundle
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.IBundle.State">
            <summary>
            Bundle State
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.IBundle.DataInfo">
            <summary>
            Bundle Data
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.Start">
            <summary>
            Start Bundle
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.Stop">
            <summary>
            Stop Bundle
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.Update">
            <summary>
            Bundle Update
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.Update(System.IO.Stream)">
            <summary>
            Bundle Update with Stream
            </summary>
            <param name="inputStream"></param>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.Uninstall">
            <summary>
            Bundle Uninstall
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.GetProperties">
            <summary>
            Bundle GetProperties
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Addin.IBundle.Context">
            <summary>
            Bundle Context
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.IBundle.Id">
            <summary>
            Bundle ID
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.IBundle.Location">
            <summary>
            Bundle`s file path
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.IBundle.SymbolicName">
            <summary>
            Symbolic Name
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.GetRegisteredServices">
            <summary>
            Get Registered Services
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.GetServicesInUse">
            <summary>
            Get Services In Use
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.GetResource(System.String)">
            <summary>
            Get Resource
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.GetProperties(System.String)">
            <summary>
            Get Properties
            </summary>
            <param name="locale">文件</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.LoadClass(System.String)">
            <summary>
            Load Class by Name
            </summary>
            <param name="name">Type name</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.GetResources(System.Object)">
            <summary>
            Get Resources
            </summary>
            <param name="name">Resources name</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.GetEntryPaths(System.String)">
            <summary>
            Get Entry Paths
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.GetEntry(System.String)">
            <summary>
            Get Entry
            </summary>
            <param name="name">name</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.GetLastModified">
            <summary>
            Get Last Modified
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.FindEntries(System.String,System.String,System.Boolean)">
            <summary>
            Find Entries
            </summary>
            <param name="path">path</param>
            <param name="filePattern">file Pattern</param>
            <param name="recurse">recurse</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Addin.IBundle.BundleDynamicDirectory">
            <summary>
            组件文件目录
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.IBundle.BundleDynamicFile">
            <summary>
            组件动态文件
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IBundle.LoadResource(System.String)">
            <summary>
            加载资源
            </summary>
            <param name="resourceName">资源名称及路经</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Addin.IBundleActivator">
            <summary>
            Customizes the starting and stopping of a bundle.
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IBundleActivator.Start(Syncfusion.Addin.IBundleContext)">
            <summary>
            组件启动
            </summary>
            <param name="context">组件环境</param>
        </member>
        <member name="M:Syncfusion.Addin.IBundleActivator.Stop(Syncfusion.Addin.IBundleContext)">
            <summary>
            组件停止
            </summary>
            <param name="context">组件环境</param>
        </member>
        <member name="T:Syncfusion.Addin.IBundleContext">
            <summary>
            组件环境
            </summary>
        </member>
        <member name="E:Syncfusion.Addin.IBundleContext.BundleEvent">
            <summary>
            Event raised when a bundle transition occurs.
            </summary>
        </member>
        <member name="E:Syncfusion.Addin.IBundleContext.ServiceEvent">
            <summary>
            服务事件
            </summary>
        </member>
        <member name="E:Syncfusion.Addin.IBundleContext.FrameworkEvent">
            <summary>
            框架事件
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.GetProperty(System.String)">
            <summary>
            根据key获取属性
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Addin.IBundleContext.Bundle">
            <summary>
            组件对象
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.Install(System.String)">
            <summary>
            根据组件文件路径安装组件
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.Install(System.String,System.IO.Stream)">
            <summary>
            根据组件路径及内存信息安装组件
            </summary>
            <param name="location">文件路径</param>
            <param name="inputStream"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.GetBundle(System.Int32)">
            <summary>
            获取组件ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Addin.IBundleContext.Bundles">
            <summary>
            组件
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.RegisterService(System.String[],System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            注册服务
            </summary>
            <param name="clazzes">类 对象 名称集合</param>
            <param name="service">对象服务</param>
            <param name="properties">对象属性</param>
            <returns>IServiceRegistration</returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.RegisterService(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            注册服务
            </summary>
            <param name="clazz">类 对象名称</param>
            <param name="service">服务</param>
            <param name="properties">属性</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.RegisterService(System.Type,System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
             注册服务
            </summary>
            <param name="type">对象类型</param>
            <param name="service">服务</param>
            <param name="properties">属性</param>
            <returns></returns>
            <example>
            IUserName userInfo=new UserName();
            Context.RegisterService(TypeOf(IUserName),userInfo,null);
            </example>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.RegisterService``1(System.Object,System.Collections.Generic.Dictionary{System.String,System.Object})">
             <summary>
            
             </summary>
             <typeparam name="T">泛型类型</typeparam>
             <param name="service">服务</param>
             <param name="properties">属性</param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.GetServiceReferences(System.String,System.String)">
            <summary>
            获取服务
            </summary>
            <param name="clazz">类</param>
            <param name="filter">过滤</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.GetAllServiceReferences(System.String,System.String)">
            <summary>
            获取所有服务
            </summary>
            <param name="clazz">类</param>
            <param name="filter">过滤</param>
            <returns>IServiceReference[]</returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.GetServiceReference(System.String)">
            <summary>
            获取服务
            </summary>
            <param name="clazz">类</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.GetRegisterService(Syncfusion.Addin.IServiceReference)">
            <summary>
            获取服务
            </summary>
            <param name="reference">服务</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.GetRegisterService(System.String)">
            <summary>
            获取服务
            </summary>
            <param name="clazz">类</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.GetRegisterService(System.Type)">
            <summary>
            获取服务
            </summary>
            <param name="type">类型</param>
            <returns>object</returns>
        </member>
        <!-- 对于成员“M:Syncfusion.Addin.IBundleContext.GetRegisterService``1”忽略有格式错误的 XML 注释 -->
        <member name="M:Syncfusion.Addin.IBundleContext.UngetService(Syncfusion.Addin.IServiceReference)">
            <summary>
            卸载服务
            </summary>
            <param name="reference">服务引用</param>
            <returns>Bool</returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.GetDataFile(System.String)">
            <summary>
            获取文件的信息
            </summary>
            <param name="filename">文件名称</param>
            <returns>FileSystemInfo</returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.CreateFilter(System.String)">
            <summary>
            创建过滤
            </summary>
            <param name="filter">过滤字符串</param>
            <returns>IFilter</returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleContext.IsAssignableTo(Syncfusion.Addin.IServiceReference)">
            <summary>
            匹配
            </summary>
            <param name="reference">服务引用</param>
            <returns>bool</returns>
        </member>
        <member name="T:Syncfusion.Addin.IBundleRepository">
            <summary>
            组件库
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IBundleRepository.Register(Syncfusion.Addin.IBundle)">
            <summary>
            注册组件
            </summary>
            <param name="bundle">组件</param>
        </member>
        <member name="M:Syncfusion.Addin.IBundleRepository.Unregister(Syncfusion.Addin.IBundle)">
            <summary>
            卸载组件
            </summary>
            <param name="bundle">组件</param>
            <returns>bool</returns>
        </member>
        <member name="P:Syncfusion.Addin.IBundleRepository.Count">
            <summary>
            组件数量
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IBundleRepository.GetBundle(System.Int32)">
            <summary>
            根据组件编号获取组件
            </summary>
            <param name="bundleId">组件编号</param>
            <returns>IBundle</returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleRepository.GetBundle(System.String,System.Version)">
            <summary>
            获取组件
            </summary>
            <param name="symbolicName">名称</param>
            <param name="version">版本</param>
            <returns>IBundle</returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleRepository.GetBundles(System.String)">
            <summary>
            获取组件列表
            </summary>
            <param name="symbolicName">名称</param>
            <returns>IBundle[] 数组</returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleRepository.GetBundles">
            <summary>
            获取所有组件
            </summary>
            <returns>IBundle</returns>
        </member>
        <member name="M:Syncfusion.Addin.IBundleRepository.GetBundle(System.String)">
            <summary>
            根据位置获取组件
            </summary>
            <param name="location">位置</param>
            <returns>IBundle</returns>
        </member>
        <member name="P:Syncfusion.Addin.IBundleRepository.Item(System.Int32)">
            <summary>
            当前组件编号
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Addin.IBundleRepository.BundlePaths">
            <summary>
            组件路经
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.IFilter">
            <summary>
            过滤
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IFilter.Match(Syncfusion.Addin.IServiceReference)">
            <summary>
            匹配
            </summary>
            <param name="reference">服务引用</param>
            <returns>Bool</returns>
        </member>
        <member name="M:Syncfusion.Addin.IFilter.Match(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            匹配
            </summary>
            <param name="dictionary">字典信息</param>
            <returns>Bool</returns>
        </member>
        <member name="M:Syncfusion.Addin.IFilter.MatchCase(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            匹配  区分大小写
            </summary>
            <param name="dictionary">字典信息</param>
            <returns>Bool</returns>
        </member>
        <member name="M:Syncfusion.Addin.IFilter.ToString">
            <summary>
            ToString
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Syncfusion.Addin.IFilter.Equals(System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj">基类</param>
            <returns>bool</returns>
        </member>
        <member name="M:Syncfusion.Addin.IFilter.GetHashCode">
            <summary>
            获取Hash编号
            </summary>
            <returns>int</returns>
        </member>
        <member name="T:Syncfusion.Addin.IFramework">
            <summary>
            Interface IFramework
            </summary>
        </member>
        <member name="P:Syncfusion.Addin.IFramework.Bundles">
            <summary>
            组件信息
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IFramework.GetNextServiceId">
            <summary>
            返回服务编号
            </summary>
            <returns>Int</returns>
        </member>
        <member name="M:Syncfusion.Addin.IFramework.GetServiceReferences(System.String,System.String,Syncfusion.Addin.IBundleContext,System.Boolean)">
            <summary>
            获取服务引用
            </summary>
            <param name="clazz">类</param>
            <param name="filterString">过滤字符串</param>
            <param name="context">组件</param>
            <param name="allservices">是否所有服务</param>
            <returns>IServiceReference[]</returns>
        </member>
        <member name="M:Syncfusion.Addin.IFramework.InstallBundle(System.String)">
            <summary>
            注册组件
            </summary>
            <param name="location">位置</param>
            <returns>IBundle</returns>
        </member>
        <member name="M:Syncfusion.Addin.IFramework.InstallBundle(System.String,Syncfusion.Addin.Configuration.Plugin.BundleData)">
            <summary>
            注册组件
            </summary>
            <param name="location">位置</param>
            <param name="bd">组件数据</param>
            <returns>IBundle</returns>
        </member>
        <member name="M:Syncfusion.Addin.IFramework.Launch">
            <summary>
            加载
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IFramework.Shutdown">
            <summary>
            关闭/卸载
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IFramework.StartBundle(System.Int32)">
            <summary>
            启动
            </summary>
            <param name="id">组件编号</param>
            <returns>IBundle</returns>
        </member>
        <member name="M:Syncfusion.Addin.IFramework.StartBundle(Syncfusion.Addin.IBundle)">
            <summary>
            启动组件
            </summary>
            <param name="bundle">组件</param>
        </member>
        <member name="M:Syncfusion.Addin.IFramework.StopBundle(System.Int32)">
            <summary>
            停止组件根据编号
            </summary>
            <param name="id">组件编号</param>
        </member>
        <member name="M:Syncfusion.Addin.IFramework.GetBundle(System.String)">
            <summary>
            获取组件
            </summary>
            <param name="location">位置</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IFramework.UninstallBundle(System.Int32)">
            <summary>
            卸载组件
            </summary>
            <param name="id">组件编号</param>
        </member>
        <member name="T:Syncfusion.Addin.InvalidSyntaxException">
            <summary>
            Class InvalidSyntaxException.
            </summary>
        </member>
        <member name="T:Syncfusion.Addin.IServiceFactory">
            <summary>
            服务工厂
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IServiceFactory.GetService(Syncfusion.Addin.IBundle,Syncfusion.Addin.IServiceRegistration)">
            <summary>
            获取注册的服务
            </summary>
            <param name="bundle">组件</param>
            <param name="registration">服务</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IServiceFactory.UngetService(Syncfusion.Addin.IBundle,Syncfusion.Addin.IServiceRegistration,System.Object)">
            <summary>
             联合获取服务
            </summary>
            <param name="bundle">组件</param>
            <param name="registration">注册服务</param>
            <param name="service">服务</param>
        </member>
        <member name="T:Syncfusion.Addin.IServiceReference">
            <summary>
            Interface IServiceReference
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IServiceReference.GetProperty(System.String)">
            <summary>
            过时
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IServiceReference.GetPropertyKeys">
            <summary>
            过时
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IServiceReference.GetBundle">
            <summary>
            获取组件信息
            </summary>
            <returns>IBundle</returns>
        </member>
        <member name="M:Syncfusion.Addin.IServiceReference.GetUsingBundles">
            <summary>
            获取使用的组件信息
            </summary>
            <returns>IBundle[]</returns>
        </member>
        <member name="M:Syncfusion.Addin.IServiceReference.IsAssignableTo(Syncfusion.Addin.IBundle,System.String)">
            <summary>
            分配
            </summary>
            <param name="bundle">组件</param>
            <param name="className">类的名称</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Addin.IServiceReference.GetClasses">
            <summary>
            获取类的信息
            </summary>
            <returns>string[]</returns>
        </member>
        <member name="T:Syncfusion.Addin.IServiceRegistration">
            <summary>
            服务注册信息
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IServiceRegistration.GetReference">
            <summary>
            得到引用
            </summary>
            <returns>IServiceReference</returns>
        </member>
        <member name="P:Syncfusion.Addin.IServiceRegistration.Properties">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="M:Syncfusion.Addin.IServiceRegistration.Unregister">
            <summary>
            卸载
            </summary>
        </member>
        <member name="T:Syncfusion.Core.DesignPatterns.Singleton`1">
            <summary>
            Singleton Design Pattern, thread-safe without using locks.
            </summary>
            <typeparam name="T">Type of instance.</typeparam>
        </member>
        <member name="T:Syncfusion.Core.DesignPatterns.Singleton`1.Inner">
            <summary>
            Class Inner.
            </summary>
        </member>
        <member name="F:Syncfusion.Core.DesignPatterns.Singleton`1.Inner._instance">
            <summary>
            Static Field _instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Core.DesignPatterns.Singleton`1.Inner.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Core.DesignPatterns.Singleton`1.Inner" /> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Core.DesignPatterns.Singleton`1.Instance">
            <summary>
            Gets singleton instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Core.DesignPatterns.Singleton`1.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Syncfusion.Core.DesignPatterns.Singleton`1" /> class from being created.
            </summary>
        </member>
        <member name="T:Syncfusion.Core.Extensions.BoolExtensions">
            <summary>
            Class BoolExtensions.
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Extensions.BoolExtensions.ToInt(System.Boolean)">
            <summary>
            BOOL 扩展
            </summary>
            <param name="b">Bool 数据</param>
            <returns>Int</returns>
        </member>
        <member name="T:Syncfusion.Core.Extensions.ClassExtensions">
            <summary>
            Extension Methods to be used by Classes
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Extensions.ClassExtensions.ThrowIfArgumentIsNull``1(``0,System.String)">
            <summary>
            Throws an exception if the object called upon is null.
            </summary>
            <typeparam name="T">The calling class</typeparam>
            <param name="obj">The This object</param>
            <param name="text">The text to be written on the ArgumentNullException: [text] not allowed to be null</param>
        </member>
        <member name="T:Syncfusion.Core.Extensions.DateTimeExtensions">
            <summary>
            DateTime Extensions
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DateTimeExtensions.Elapsed(System.DateTime)">
            <summary>
            Elapseds the time.
            </summary>
            <param name="datetime">The datetime.</param>
            <returns>TimeSpan</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DateTimeExtensions.WeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
            <summary>
            Weeks the of year.
            </summary>
            <param name="datetime">The datetime.</param>
            <param name="weekrule">The weekrule.</param>
            <param name="firstDayOfWeek">The first day of week.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DateTimeExtensions.WeekOfYear(System.DateTime,System.DayOfWeek)">
            <summary>
            Weeks the of year.
            </summary>
            <param name="datetime">The datetime.</param>
            <param name="firstDayOfWeek">The first day of week.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DateTimeExtensions.WeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule)">
            <summary>
            Weeks the of year.
            </summary>
            <param name="datetime">The datetime.</param>
            <param name="weekrule">The weekrule.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DateTimeExtensions.WeekOfYear(System.DateTime)">
            <summary>
            Weeks the of year.
            </summary>
            <param name="datetime">The datetime.</param>
            <param name="weekrule">The weekrule.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DateTimeExtensions.GetDateTimeForDayOfWeek(System.DateTime,System.DayOfWeek,System.DayOfWeek)">
            <summary>
            Gets the date time for day of week.
            </summary>
            <param name="datetime">The datetime.</param>
            <param name="day">The day.</param>
            <param name="firstDayOfWeek">The first day of week.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DateTimeExtensions.FirstDateTimeOfWeek(System.DateTime)">
            <summary>
            Firsts the date time of week.
            </summary>
            <param name="datetime">The datetime.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DateTimeExtensions.FirstDateTimeOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Firsts the date time of week.
            </summary>
            <param name="datetime">The datetime.</param>
            <param name="firstDayOfWeek">The first day of week.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DateTimeExtensions.DaysFromFirstDayOfWeek(System.DayOfWeek,System.DayOfWeek)">
            <summary>
            Dayses from first day of week.
            </summary>
            <param name="current">The current.</param>
            <param name="firstDayOfWeek">The first day of week.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Core.Extensions.DecimalExtensions">
            <summary>
            Decimal Extensions
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DecimalExtensions.PercentageOf(System.Decimal,System.Int32)">
            <summary>
            The numbers percentage
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DecimalExtensions.PercentOf(System.Decimal,System.Int32)">
            <summary>
            Percentage of the number.
            </summary>
            <param name="percent">The percent</param>
            <param name="number">The Number</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DecimalExtensions.PercentageOf(System.Decimal,System.Decimal)">
            <summary>
            The numbers percentage
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DecimalExtensions.PercentOf(System.Decimal,System.Decimal)">
            <summary>
            Percentage of the number.
            </summary>
            <param name="percent">The percent</param>
            <param name="number">The Number</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DecimalExtensions.PercentageOf(System.Decimal,System.Int64)">
            <summary>
            The numbers percentage
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.DecimalExtensions.PercentOf(System.Decimal,System.Int64)">
            <summary>
            Percentage of the number.
            </summary>
            <param name="percent">The percent</param>
            <param name="number">The Number</param>
            <returns>The result</returns>
        </member>
        <member name="T:Syncfusion.Core.Extensions.DoubleExtensions">
            <summary>
            Double Extensions
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Extensions.EventHandlerExtensions.InvokeAsync``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Invoke an event asynchronously. Each subscriber to the event will be invoked on a separate thread.
            </summary>
            <param name="someEvent">The event to be invoked asynchronously.</param>
            <param name="sender">The sender of the event.</param>
            <param name="args">The args of the event.</param>
            <typeparam name="TEventArgs">The type of <see cref="T:System.EventArgs"/> to be used with the event.</typeparam>
        </member>
        <member name="T:Syncfusion.Core.Extensions.FloatExtensions">
            <summary>
            Float Extensions
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Extensions.FloatExtensions.PercentageOf(System.Single,System.Int32)">
            <summary>
            Toes the percent.
            </summary>
            <param name="value">The value.</param>
            <param name="percentOf">The percent of.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.FloatExtensions.PercentageOf(System.Single,System.Single)">
            <summary>
            Toes the percent.
            </summary>
            <param name="value">The value.</param>
            <param name="percentOf">The percent of.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.FloatExtensions.PercentageOf(System.Single,System.Double)">
            <summary>
            Toes the percent.
            </summary>
            <param name="value">The value.</param>
            <param name="percentOf">The percent of.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.FloatExtensions.PercentageOf(System.Single,System.Int64)">
            <summary>
            Toes the percent.
            </summary>
            <param name="value">The value.</param>
            <param name="percentOf">The percent of.</param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Syncfusion.Core.Extensions.IEnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Syncfusion.Core.Extensions.IEnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})”忽略有格式错误的 XML 注释 -->
        <member name="M:Syncfusion.Core.Extensions.IEnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Generic iterator function that is useful to replace a foreach loop with at your discretion.  A provided action is performed on each element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action">Function that takes in the current value in the sequence.  Returns a value indicating whether the iteration should continue.  So return false if you don't want to iterate anymore.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IEnumerableExtensions.Each``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Generic iterator function that is useful to replace a foreach loop with at your discretion.  A provided action is performed on each element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="action">Function that takes in the current value and its index in the sequence.  Returns a value indicating whether the iteration should continue.  So return false if you don't want to iterate anymore.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Core.Extensions.IListExtensions">
            <summary>
            Class IListExtensions.
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IListExtensions.BinarySearch``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},``1)">
            <summary>
            Binaries the search.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
            <param name="list">The list.</param>
            <param name="keySelector">The key selector.</param>
            <param name="key">The key.</param>
            <returns>T.</returns>
            <exception cref="T:System.InvalidOperationException">Item not found</exception>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IListExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle's list items.
            </summary>
            <typeparam name="T">List type.</typeparam>
            <param name="list">Generic list.</param>
        </member>
        <member name="T:Syncfusion.Core.Extensions.IntExtensions">
            <summary>
            Integer Extensions
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IntExtensions.PercentageOf(System.Int32,System.Int32)">
            <summary>
            The numbers percentage
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IntExtensions.PercentOf(System.Int32,System.Int32)">
            <summary>
            Percentage of the number.
            </summary>
            <param name="percent">The percent</param>
            <param name="number">The Number</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IntExtensions.PercentageOf(System.Int32,System.Single)">
            <summary>
            The numbers percentage
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IntExtensions.PercentOf(System.Int32,System.Single)">
            <summary>
            Percentage of the number.
            </summary>
            <param name="percent">The percent</param>
            <param name="number">The Number</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IntExtensions.PercentageOf(System.Int32,System.Double)">
            <summary>
            The numbers percentage
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IntExtensions.PercentOf(System.Int32,System.Double)">
            <summary>
            Percentage of the number.
            </summary>
            <param name="percent">The percent</param>
            <param name="number">The Number</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IntExtensions.PercentageOf(System.Int32,System.Decimal)">
            <summary>
            The numbers percentage
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IntExtensions.PercentOf(System.Int32,System.Decimal)">
            <summary>
            Percentage of the number.
            </summary>
            <param name="percent">The percent</param>
            <param name="number">The Number</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IntExtensions.PercentageOf(System.Int32,System.Int64)">
            <summary>
            The numbers percentage
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IntExtensions.PercentOf(System.Int32,System.Int64)">
            <summary>
            Percentage of the number.
            </summary>
            <param name="percent">The percent</param>
            <param name="number">The Number</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IntExtensions.ToString(System.Nullable{System.Int32},System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultvalue">The defaultvalue.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IntExtensions.ToBool(System.Nullable{System.Int32})">
            <summary>
            To the bool.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IntExtensions.SafeProgressValue(System.Int32)">
            <summary>
            Safes the progress value.
            </summary>
            <param name="i">The i.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.IntExtensions.SafeProgressValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Safes the progress value.
            </summary>
            <param name="i">The i.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Syncfusion.Core.Extensions.LinqExtensions">
            <summary>
            LinQ  Extentensions
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Extensions.LinqExtensions.ToCSVString(System.Linq.IOrderedQueryable)">
            <summary>
            Converts the Linq data to a commaseperated string including header.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.LinqExtensions.ToCSVString(System.Linq.IOrderedQueryable,System.String)">
            <summary>
            Converts the Linq data to a commaseperated string including header.
            </summary>
            <param name="data">The data.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.LinqExtensions.ToCSVString(System.Linq.IOrderedQueryable,System.String,System.String)">
            <summary>
            Converts the Linq data to a commaseperated string including header.
            </summary>
            <param name="data">The data.</param>
            <param name="delimiter">The delimiter.</param>
            <param name="nullvalue">The nullvalue.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Core.Extensions.LongExtensions">
            <summary>
            Long Extensions
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Extensions.LongExtensions.PercentageOf(System.Int64,System.Int32)">
            <summary>
            The numbers percentage
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.LongExtensions.PercentageOf(System.Int64,System.Single)">
            <summary>
            The numbers percentage
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.LongExtensions.PercentageOf(System.Int64,System.Double)">
            <summary>
            The numbers percentage
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.LongExtensions.PercentageOf(System.Int64,System.Decimal)">
            <summary>
            The numbers percentage
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.LongExtensions.PercentageOf(System.Int64,System.Int64)">
            <summary>
            The numbers percentage
            </summary>
            <param name="number">The number.</param>
            <param name="percent">The percent.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.LongExtensions.PercentOf(System.Int64,System.Int32)">
            <summary>
            Percentage of the number.
            </summary>
            <param name="percent">The percent</param>
            <param name="number">The Number</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.LongExtensions.PercentOf(System.Int64,System.Single)">
            <summary>
            Percentage of the number.
            </summary>
            <param name="percent">The percent</param>
            <param name="number">The Number</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.LongExtensions.PercentOf(System.Int64,System.Double)">
            <summary>
            Percentage of the number.
            </summary>
            <param name="percent">The percent</param>
            <param name="number">The Number</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.LongExtensions.PercentOf(System.Int64,System.Decimal)">
            <summary>
            Percentage of the number.
            </summary>
            <param name="percent">The percent</param>
            <param name="number">The Number</param>
            <returns>The result</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.LongExtensions.PercentOf(System.Int64,System.Int64)">
            <summary>
            Percentage of the number.
            </summary>
            <param name="percent">The percent</param>
            <param name="number">The Number</param>
            <returns>The result</returns>
        </member>
        <member name="T:Syncfusion.Core.Extensions.ObjectExtensions">
            <summary>
            Object扩展
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Extensions.ObjectExtensions.CloneObject(System.Object)">
            <summary>
            克隆对像
            </summary>
            <param name="obj">当前对像</param>
            <returns>object</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.ObjectExtensions.IsBinaryEqualTo(System.Object,System.Object)">
            <summary>
            是否相等
            </summary>
            <param name="obj">参数1</param>
            <param name="obj1">参数2</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.ObjectExtensions.IsNull(System.Object)">
            <summary>
            是否为空
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.ObjectExtensions.SafeString(System.Object)">
            <summary>
            转换为String
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.ObjectExtensions.SafeInt(System.Object)">
            <summary>
            转换为Int
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.ObjectExtensions.SafeInt(System.Object,System.Int32)">
            <summary>
            将参数转换为Int类型
            </summary>
            <param name="DefaultValue">参数值</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.ObjectExtensions.IsDate(System.Object)">
            <summary>
            是否日期类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.ObjectExtensions.IsNumeric(System.Object)">
            <summary>
            是否整数、浮点类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Core.Extensions.StringExtensions">
            <summary>
            String Extentensions
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.FormatWith(System.String,System.Object)">
            <summary>
            Formats a string with one literal placeholder.
            </summary>
            <param name="text">The extension text</param>
            <param name="arg0">Argument 0</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.FormatWith(System.String,System.Object,System.Object)">
            <summary>
            Formats a string with two literal placeholders.
            </summary>
            <param name="text">The extension text</param>
            <param name="arg0">Argument 0</param>
            <param name="arg1">Argument 1</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.FormatWith(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Formats a string with tree literal placeholders.
            </summary>
            <param name="text">The extension text</param>
            <param name="arg0">Argument 0</param>
            <param name="arg1">Argument 1</param>
            <param name="arg2">Argument 2</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Formats a string with a list of literal placeholders.
            </summary>
            <param name="text">The extension text</param>
            <param name="args">The argument list</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.FormatWith(System.String,System.IFormatProvider,System.Object[])">
            <summary>
            Formats a string with a list of literal placeholders.
            </summary>
            <param name="text">The extension text</param>
            <param name="provider">The format provider</param>
            <param name="args">The argument list</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.XmlSerialize``1(``0)">
            <summary>Serialises an object of type T in to an xml string</summary>
            <typeparam name="T">Any class type</typeparam>
            <param name="objectToSerialise">Object to serialise</param>
            <returns>A string that represents Xml, empty oterwise</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.XmlDeserialize``1(System.String)">
            <summary>Deserialises an xml string in to an object of Type T</summary>
            <typeparam name="T">Any class type</typeparam>
            <param name="xml">Xml as string to deserialise from</param>
            <returns>A new object of type T is successful, null if failed</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.ToEnum``1(System.String)">
            <summary>
            Parses a string into an Enum
            </summary>
            <typeparam name="T">The type of the Enum</typeparam>
            <param name="value">String value to parse</param>
            <returns>The Enum corresponding to the stringExtensions</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Parses a string into an Enum
            </summary>
            <typeparam name="T">The type of the Enum</typeparam>
            <param name="value">String value to parse</param>
            <param name="ignorecase">Ignore the case of the string being parsed</param>
            <returns>The Enum corresponding to the stringExtensions</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.ToInteger(System.String,System.Int32)">
            <summary>
            Toes the integer.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultvalue">The defaultvalue.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.ToInteger(System.String)">
            <summary>
            Toes the integer.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.ToDouble(System.String,System.Double)">
            <summary>
            Toes the double.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultvalue">The defaultvalue.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.ToDouble(System.String)">
            <summary>
            Toes the double.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.ToDateTime(System.String,System.Nullable{System.DateTime})">
            <summary>
            Toes the date time.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultvalue">The defaultvalue.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.ToDateTime(System.String)">
            <summary>
            Toes the date time.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.ToBoolean(System.String)">
            <summary>
            Converts a string value to bool value, supports "T" and "F" conversions.
            </summary>
            <param name="value">The string value.</param>
            <returns>A bool based on the string value</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.ToUpperLowerNameVariant(System.String)">
            <summary>
            Converts string to a Name-Format where each first letter is Uppercase.
            </summary>
            <param name="value">The string value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.Encrypt(System.String,System.String)">
            <summary>
            Encryptes a string using the supplied key. Encoding is done using RSA encryption.
            </summary>
            <param name="stringToEncrypt">String that must be encrypted.</param>
            <param name="key">Encryptionkey.</param>
            <returns>A string representing a byte array separated by a minus sign.</returns>
            <exception cref="T:System.ArgumentException">Occurs when stringToEncrypt or key is null or empty.</exception>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.Decrypt(System.String,System.String)">
            <summary>
            Decryptes a string using the supplied key. Decoding is done using RSA encryption.
            </summary>
            <param name="key">Decryptionkey.</param>
            <returns>The decrypted string or null if decryption failed.</returns>
            <exception cref="T:System.ArgumentException">Occurs when stringToDecrypt or key is null or empty.</exception>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.IsValidUrl(System.String)">
            <summary>
            Determines whether it is a valid URL.
            </summary>
            <returns>
            	<c>true</c> if [is valid URL] [the specified text]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.IsValidEmailAddress(System.String)">
            <summary>
            Determines whether it is a valid email address
            </summary>
            <returns>
            	<c>true</c> if [is valid email address] [the specified s]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.Email(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Send an email using the supplied string.
            </summary>
            <param name="body">String that will be used i the body of the email.</param>
            <param name="subject">Subject of the email.</param>
            <param name="sender">The email address from which the message was sent.</param>
            <param name="recipient">The receiver of the email.</param> 
            <param name="server">The server from which the email will be sent.</param>  
            <returns>A boolean value indicating the success of the email send.</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the string to a specified length and replace the truncated to a ...
            </summary>
            <param name="maxLength">total length of characters to maintain before the truncate happens</param>
            <returns>truncated string</returns>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.Format(System.String,System.Object,System.Object[])">
            <summary>
            Replaces the format item in a specified System.String with the text equivalent
            of the value of a specified System.Object instance.
            </summary>
            <param name="arg">The arg.</param>
            <param name="additionalArgs">The additional args.</param>
        </member>
        <member name="M:Syncfusion.Core.Extensions.StringExtensions.IsNotNullOrEmpty(System.String)">
            <summary>
            Determines whether [is not null or empty] [the specified input].
            </summary>
            <returns>
            	<c>true</c> if [is not null or empty] [the specified input]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Syncfusion.Core.DataHelper">
            <summary>
            This class provides a number of methods that help with a number of standard data tasks.
            </summary>
        </member>
        <member name="M:Syncfusion.Core.DataHelper.TableToCsv(System.Data.DataTable)">
            <summary>
            This method takes a data table and turns all its contents into a CSV formatted string.
            </summary>
            <param name="table">Data Table</param>
            <returns>CSV String</returns>
        </member>
        <member name="M:Syncfusion.Core.DataHelper.TableToCsv(System.Data.DataView)">
            <summary>
            This method takes a data view and turns all its contents into a CSV formatted string.
            </summary>
            <param name="view">Data View</param>
            <returns>CSV String</returns>
        </member>
        <member name="M:Syncfusion.Core.DataHelper.ToGuidSafe(System.Object)">
            <summary>
            Safely converts a value into a Guid or returns Guid.Empty if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns>Guid</returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            Guid myGuid = dataSet.Tables[0].Rows[0]["id"].ToGuidSave();
            </example>
        </member>
        <member name="M:Syncfusion.Core.DataHelper.ToStringSafe(System.Object)">
            <summary>
            Safely converts a value into a string or returns string.Empty if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            string myString = dataSet.Tables[0].Rows[0]["name"].ToStringSave();
            </example>
        </member>
        <member name="M:Syncfusion.Core.DataHelper.ToBooleanSafe(System.Object)">
            <summary>
            Safely converts a value into a boolean or returns false if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            bool myBool = dataSet.Tables[0].Rows[0]["active"].ToBooleanSave();
            </example>
        </member>
        <member name="M:Syncfusion.Core.DataHelper.ToDateTimeSafe(System.Object)">
            <summary>
            Safely converts a value into a DateTime or returns DateTime.MinValue if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            DateTime myDate = dataSet.Tables[0].Rows[0]["timeStamp"].ToDateTimeSave();
            </example>
        </member>
        <member name="M:Syncfusion.Core.DataHelper.ToIntegerSafe(System.Object)">
            <summary>
            Safely converts a value into an integer or returns 0 if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            int myInt = dataSet.Tables[0].Rows[0]["number"].ToIntegerSave();
            </example>
        </member>
        <member name="M:Syncfusion.Core.DataHelper.ToDoubleSafe(System.Object)">
            <summary>
            Safely converts a value into a double or returns 0.0 if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            int myDouble = dataSet.Tables[0].Rows[0]["number"].ToDoubleSave();
            </example>
        </member>
        <member name="M:Syncfusion.Core.DataHelper.ToDecimalSafe(System.Object)">
            <summary>
            Safely converts a value into a decimal or returns 0.0 if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            decimal myDec = dataSet.Tables[0].Rows[0]["price"].ToDecimalSave();
            </example>
        </member>
        <member name="M:Syncfusion.Core.DataHelper.ToCharSafe(System.Object)">
            <summary>
            Safely converts a value into a char or returns ' ' if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            char myChar = dataSet.Tables[0].Rows[0]["character"].ToCharSave();
            </example>
        </member>
        <member name="M:Syncfusion.Core.DataHelper.ToByteArraySafe(System.Object)">
            <summary>
            Safely converts a value into a byte array or returns an empty byte array if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            byte[] myBytes = dataSet.Tables[0].Rows[0]["image"].ToByteArraySave();
            </example>
        </member>
        <member name="T:Syncfusion.Core.Utilities.EnumHelper">
            <summary>
            This class provides various helper functions for dealing with enums
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.EnumHelper.GetEnumInformation``1">
            <summary>Returns a list (enumerable) of information items for each value in the enum</summary>
            <typeparam name="T">Enum type</typeparam>
            <returns>Enumerable list of enum information items (wich can be very useful for binding for instance)</returns>
        </member>
        <member name="F:Syncfusion.Core.Utilities.EnumHelper._knownEnumInformation">
            <summary>Internal cache to avoid having to re-discover enums all the time</summary>
        </member>
        <member name="T:Syncfusion.Core.Utilities.EnumInformation">
            <summary>This class represents meta information about an enum</summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.EnumInformation.#ctor(System.Int32,System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="value">Integer value</param>
            <param name="enumValue">Original enum value</param>
            <param name="name">Enum value name</param>
        </member>
        <member name="P:Syncfusion.Core.Utilities.EnumInformation.Value">
            <summary>Value as an integer</summary>
        </member>
        <member name="P:Syncfusion.Core.Utilities.EnumInformation.EnumValue">
            <summary>The selected enum value as an object</summary>
        </member>
        <member name="P:Syncfusion.Core.Utilities.EnumInformation.DisplayText">
            <summary>The enum name spelled out as separate words</summary>
        </member>
        <member name="P:Syncfusion.Core.Utilities.EnumInformation.Name">
            <summary>Enum value name</summary>
        </member>
        <member name="T:Syncfusion.Core.Utilities.If">
            <summary>
            Static class providing convenience methods for common tasks
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.If.Real``1(System.Object,System.Action{``0})">
            <summary>Checks if the provided type is the correct type and not null, and if so, runs the provided action</summary>
            <typeparam name="T">Type to check for</typeparam>
            <param name="instance">The object instance that is to be checked.</param>
            <param name="action">The code/action that is to be executed if the instance is of the right type and not null</param>
        </member>
        <member name="M:Syncfusion.Core.Utilities.If.Real``2(System.Object,System.Object,System.Action{``0,``1})">
            <summary>Checks if the provided types are the correct types and not null, and if so, runs the provided action</summary>
            <typeparam name="T1">The type of the first instance to check</typeparam>
            <typeparam name="T2">The type of the second instance to check</typeparam>
            <param name="instance">The object instance that is to be checked.</param>
            <param name="instance2">The second object instance that is to be checked.</param>
            <param name="action">The code/action that is to be executed if the instance2 are of the right type and not null</param>
        </member>
        <member name="M:Syncfusion.Core.Utilities.If.NotNull(System.Object,System.Action)">
            <summary>Executes the provided action if the provided instance is not null</summary>
            <param name="instance">Object instance to check</param>
            <param name="action">The action to execute if the instance is not null</param>
        </member>
        <member name="M:Syncfusion.Core.Utilities.If.NotNull(System.Object,System.Object,System.Action)">
            <summary>Executes the provided action if the provided instances are not null</summary>
            <param name="instance">Object instance to check</param>
            <param name="instance2">Object instance to check</param>
            <param name="action">The action to execute if the instances are not null</param>
        </member>
        <member name="M:Syncfusion.Core.Utilities.If.NotNull(System.Object,System.Object,System.Object,System.Action)">
            <summary>Executes the provided action if the provided instances are not null</summary>
            <param name="instance">Object instance to check</param>
            <param name="instance2">Object instance to check</param>
            <param name="instance3">Object instance to check</param>
            <param name="action">The action to execute if the instances are not null</param>
        </member>
        <member name="M:Syncfusion.Core.Utilities.If.NotNull(System.Object,System.Object,System.Object,System.Object,System.Action)">
            <summary>Executes the provided action if the provided instances are not null</summary>
            <param name="instance">Object instance to check</param>
            <param name="instance2">Object instance to check</param>
            <param name="instance3">Object instance to check</param>
            <param name="instance4">Object instance to check</param>
            <param name="action">The action to execute if the instances are not null</param>
        </member>
        <member name="T:Syncfusion.Core.Utilities.SecurityHelper">
            <summary>
            A simple encryption class that can be used to two-encode/decode strings and byte buffers
            with single method calls.
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.SecurityHelper.EncryptBytes(System.Byte[],System.Byte[])">
            <summary>
            Encodes a stream of bytes using DES encryption with a pass key. 
            Lowest level method that handles all work.
            </summary>
            <param name="inputString">Byte array that represents the input string</param>
            <param name="encryptionKey">Encryption key used for the encryption</param>
            <returns>Encrypted bytes</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.SecurityHelper.EncryptBytes(System.String,System.Byte[])">
            <summary>
            Encrypts a string into bytes using DES encryption with a Passkey. 
            </summary>
            <param name="inputString">Input String</param>
            <param name="encryptionKey">Encryption Key</param>
            <returns>Encrypted bytes</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.SecurityHelper.EncryptString(System.String,System.Byte[])">
            <summary>
            Encrypts a string using Triple DES encryption with a two way encryption key.
            String is returned as Base64 encoded value rather than binary.
            </summary>
            <param name="inputString">Input string</param>
            <param name="encryptionKey">Encryption Key</param>
            <returns>Base64 encoded encrypted string</returns>
            <remarks>
            The key is expected to have a length of 24 bytes.
            This method can be used with an arbitrary key, but make sure
            you use the same key for encryption and decryption.
            </remarks>
        </member>
        <member name="M:Syncfusion.Core.Utilities.SecurityHelper.DecryptBytes(System.Byte[],System.Byte[])">
            <summary>
            Decrypts a Byte array from DES with an Encryption Key.
            </summary>
            <param name="decryptBuffer">Bytes to decrypt</param>
            <param name="encryptionKey">Encryption Key</param>
            <returns>Decrypted bytes</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.SecurityHelper.DecryptBytes(System.String,System.Byte[])">
            <summary>
            Decrypts a string
            </summary>
            <param name="decryptString">String to decrypt</param>
            <param name="encryptionKey">Encryption Key</param>
            <returns>Decrypted bytes</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.SecurityHelper.DecryptString(System.String,System.Byte[])">
            <summary>
            Decrypts a Base64 encoded string using DES encryption and a pass key that was used for 
            encryption.
            </summary>
            <param name="stringToDecrypt">String to decrypt</param>
            <param name="encryptionKey">Key</param>
            <returns>Decrypted string</returns>
            <remarks>
            The key is expected to have a length of 24 bytes.
            This method can be used with an arbitrary key, but make sure
            you use the same key for encryption and decryption.
            </remarks>
        </member>
        <member name="T:Syncfusion.Core.Utilities.StreamHelper">
            <summary>
            This class can be used to perform common stream operations, such as converting a stream to a string
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StreamHelper.ToString(System.IO.Stream)">
            <summary>
            Turns a stream into a string
            </summary>
            <param name="streamToConvert">Input stream</param>
            <returns>Output String</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StreamHelper.ToArray(System.IO.Stream)">
            <summary>
            Turns a stream into a byte array
            </summary>
            <param name="streamToConvert">Input stream</param>
            <returns>Output array</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StreamHelper.FromString(System.String)">
            <summary>
            Turns a string into a stream
            </summary>
            <param name="stringToConvert">Input string</param>
            <returns>Output stream</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StreamHelper.FromArray(System.Byte[])">
            <summary>
            Turns a byte array into a stream
            </summary>
            <param name="arrayToConvert">The array to convert.</param>
            <returns>Output stream</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StreamHelper.ToFile(System.IO.Stream,System.String)">
            <summary>
            Writes a stream to file
            </summary>
            <param name="stream">The stream.</param>
            <param name="fileName">Name of the file.</param>
            <returns>True if successful</returns>
            <remarks>Existing files will be overwritten.</remarks>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StreamHelper.ToFile(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Writes a stream to file
            </summary>
            <param name="stream">The stream.</param>
            <param name="fileName">Name of the file.</param>
            <param name="overrideExisting">If set to <c>true</c> override existing file.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StreamHelper.ToFile(System.IO.Stream,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Writes a stream to file
            </summary>
            <param name="stream">The stream.</param>
            <param name="fileName">Name of the file.</param>
            <param name="overrideExisting">If set to <c>true</c> override existing file.</param>
            <param name="encoding">The file encoding.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StreamHelper.FromFile(System.String)">
            <summary>
            Loads a stream from a file
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Stream</returns>
            <remarks>
            The returned stream is a memory stream that is not connected to the file.
            In other words: After this method completes, the file is closed and can be
            accessed by other means.
            </remarks>
        </member>
        <member name="T:Syncfusion.Core.Utilities.StringHelper">
            <summary>
            This class provides a number of (static) methods that are useful when working with strings.
            Some of these methods have been migrated from the VFPToolkit class written by Kamal Patel.
            Special thanks go to Kamal. (www.KamalPatel.com)
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.Lower(System.String)">
            <summary>Returns a culture-neutral to-lower operation on the string.</summary>
            <param name="originalString">Original string</param>
            <returns>Lower-case string</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.Upper(System.String)">
            <summary>Returns a culture-neutral to-upper operation on the string.</summary>
            <param name="originalString">Original string</param>
            <returns>Upper-case string</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.ToString(System.Object)">
            <summary>Returns the string in a culture-neutral fashion</summary>
            <param name="value">Value to be turned into a string</param>
            <returns>String</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.ToStringSafe(System.Object)">
            <summary>Returns a string representation of the provided value. Returns an empty string if the value is null</summary>
            <param name="value">Value to be turned into a string</param>
            <returns>String</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.Compare(System.String,System.String)">
            <summary>Returns true if the two strings match.</summary>
            <param name="firstString">First string</param>
            <param name="secondString">Second string</param>
            <returns>True or False</returns>
            <remarks>The strings are trimmed and compared in a case-insensitive, culture neutral fashion.</remarks>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.Compare(System.String,System.String,System.Boolean)">
            <summary>Returns true if the two strings match.</summary>
            <param name="firstString">First string</param>
            <param name="secondString">Second string</param>
            <param name="ignoreCase">Should case (upper/lower) be ignored?</param>
            <returns>True or False</returns>
            <remarks>The strings are trimmed and compared in a case-insensitive, culture neutral fashion.</remarks>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.Proper(System.String)">
            <summary>Receives a string as a parameter and returns the string in Proper format (makes each letter after a space capital)</summary>
            <example>StringHelper.Proper("joe doe is a good man");	//returns "Joe Doe Is A Good Man"</example>
            <param name="originalString">String</param>
            <returns>Proper string</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.SmartProper(System.String)">
            <summary>
            This method returns strings in proper case.
            However, contrary to regular Proper() methods, 
            this method can be used to format names.
            For instance, "MacLeod" will remain "MacLeod",
            "macLeod" will be "MacLeod", "MACLEOD" will be turned into
            "Macleod". "macleod" will also be turned into "Macleod".
            </summary>
            <param name="originalString">String that is to be formatted</param>
            <returns>Properly formatted string</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.SpaceCamelCase(System.String)">
            <summary>This method takes a camel-case string (such as one defined by an enum) and returns is with a space before every upper-case letter.</summary>
            <example>StringHelper.SpaceCamelCase("CamelCaseWord"); // returns"Camel Case Word"</example>
            <param name="originalString">String</param>
            <returns>String with spaces</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.ToFile(System.String,System.String)">
            <summary>Receives a string and a file name as parameters and writes the contents of the string to that file</summary>
            <example>
            string text = "This is the line we want to insert in our file.";
            StringHelper.ToFile(text, @"c:\My Folders\MyFile.txt");
            </example>:
            <param name="expression">String to be written</param>
            <param name="fileName">File name the string is to be written to.</param>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.ToFile(System.String,System.String,System.Text.Encoding)">
            <summary>Receives a string and a file name as parameters and writes the contents of the string to that file</summary>
            <example>
            string text = "This is the line we want to insert in our file.";
            StringHelper.ToFile(text, "c:\\My Folders\\MyFile.txt");
            </example>
            <param name="expression">String to be written</param>
            <param name="fileName">File name the string is to be written to.</param>
            <param name="encoding">File encoding</param>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.FromFile(System.String)">
            <summary>Loads a file from disk and returns it as a string</summary>
            <param name="fileName">File to be loaded</param>
            <returns>String containing the file contents</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.Base64Encode(System.String)">
            <summary>This method takes any regular string, and returns its base64 encoded representation</summary>
            <param name="original">Original String</param>
            <returns>Base64 encoded string</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.Base64Decode(System.String)">
            <summary>Takes a base64 encoded string and converts it into a regular string</summary>
            <param name="encodedString">Base64 encoded string</param>
            <returns>Decoded string</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.At(System.String,System.String)">
            <summary>Receives two strings as parameters and searches for one string within another. If found, returns the beginning numeric position otherwise returns 0</summary>
            <example>StringHelper.At("D", "Joe Doe");	//returns 5</example>
            <param name="searchFor">String to search for</param>
            <param name="searchIn">String to search in</param>
            <returns>Position</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.At(System.String,System.String,System.Int32)">
            <summary>
            Receives two strings and an occurrence position (1st, 2nd etc) as parameters and 
            searches for one string within another for that position. 
            If found, returns the beginning numeric position otherwise returns 0
            </summary>
            <example>
            StringHelper.At("o", "Joe Doe", 1);	//returns 2
            StringHelper.At("o", "Joe Doe", 2);	//returns 6
            </example>
            <param name="searchFor">String to search for</param>
            <param name="searchIn">String to search in</param>
            <param name="occurrence">The occurrence of the string</param>
            <returns>Position</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.Asc(System.Char)">
            <summary>Receives a character as a parameter and returns its ANSI code</summary>
            <example>Asc('#'); //returns 35</example>
            <param name="character">Character</param>
            <returns>ASCII value</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.Chr(System.Int32)">
            <summary>Receives an integer ANSI code and returns a character associated with it</summary>
            <example>StringHelper.Chr(35); //returns '#'</example>
            <param name="ansiCode">Character Code</param>
            <returns>Char that corresponds with the ascii code</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.GetWordCount(System.String)">
            <summary>Receives a string as a parameter and counts the number of words in that string</summary>
            <example>
            string lcString = "Joe Doe is a good man";
            StringHelper.GetWordCount(lcString); // returns 6
            </example>
            <param name="sourceString">String</param>
            <returns>Word Count</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.GetWordNumb(System.String,System.Int32)">
            <summary>Based on the position specified, returns a word from a string. Receives a string as a parameter and counts the number of words in that string.</summary>
            <example>
            string lcString = "Joe Doe is a good man";
            StringHelper.GetWordNumber(lcString, 5); // returns "good"
            </example>
            <param name="sourceString">String</param>
            <param name="wordPosition">Word Position</param>
            <returns>Word number</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.GetWordNumber(System.String,System.Int32)">
            <summary>Based on the position specified, returns a word from a string. Receives a string as a parameter and counts the number of words in that string.</summary>
            <example>
            string lcString = "Joe Doe is a good man";
            StringHelper.GetWordNumber(lcString, 5); // returns "good"
            </example>
            <param name="sourceString">String</param>
            <param name="wordPosition">Word Position</param>
            <returns>Word number</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.IsAlpha(System.String)">
            <summary>Returns a bool indicating if the first character in a string is an alphabet or not</summary>
            <example>StringHelper.IsAlpha("Joe Doe"); // returns true</example>
            <param name="expression">Expression</param>
            <returns>True or False depending on whether the string only had alphanumeric chars</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.Occurs(System.Char,System.String)">
            <summary>Returns the number of occurrences of a character within a string</summary>
            <example>StringHelper.Occurs('o', "Joe Doe"); // returns 2</example>
            <param name="character">Search Character</param>
            <param name="expression">Expression</param>
            <returns>Number of occurrences</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.Occurs(System.String,System.String)">
            <summary>Returns the number of occurrences of one string within another string</summary>
            <example>
            StringHelper.Occurs("oe", "Joe Doe"); //returns 2
            StringHelper.Occurs("Joe", "Joe Doe"); //returns 1
            </example>
            <param name="searchString">Search String</param>
            <param name="stringSearched">Expression</param>
            <returns>Number of occurrences</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.Replicate(System.String,System.Int32)">
            <summary>Receives a string expression and a numeric value indicating number of time and replicates that string for the specified number of times.</summary>
            <example>StringHelper.Replicate("Joe", 5); // returns JoeJoeJoeJoeJoe</example>
            <param name="expression">Expression</param>
            <param name="times">Number of times the string is to be replicated</param>
            <returns>New string</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.SubstringSafe(System.String,System.Int32,System.Int32)">
            <summary>Overloaded method for SubStr() that receives starting position and length</summary>
            <param name="expression">String expression</param>
            <param name="startIndex">Start Index</param>
            <param name="length">Length</param>
            <returns>Substring</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.SubStr(System.String,System.Int32,System.Int32)">
            <summary>Overloaded method for SubStr() that receives starting position and length</summary>
            <param name="expression">Expression</param>
            <param name="startPosition">Start Position</param>
            <param name="length">Length</param>
            <returns>Substring</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.AtLine(System.String,System.String)">
            <summary>Receives a string and converts it to an integer</summary>
            <example>StringHelper.AtLine("Is", "Is Life Beautiful? \r\n It sure is"); // returns 1</example>
            <param name="searchExpression">Search Expression</param>
            <param name="expressionSearched">Expression Searched</param>
            <returns>Line number</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.IsDigit(System.String)">
            <summary>Receives a string as a parameter and returns a bool indicating if the left most character in the string is a valid digit.</summary>
            <example>if(StringHelper.IsDigit("1Kamal")){...}	//returns true</example>
            <param name="sourceString">Expression</param>
            <returns>True or False</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.JustPath(System.String)">
            <summary>Takes a fully qualified file name, and returns just the path</summary>
            <param name="path">File name with path</param>
            <returns>Just the path as a string</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.JustFileName(System.String)">
            <summary>Returns just the file name part of a full path</summary>
            <param name="path">The full path to the file</param>
            <returns>File name</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.AddBS(System.String)">
            <summary>Makes sure the secified path ends with a back-slash</summary>
            <param name="path">Path</param>
            <returns>Path with BS</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.ArrayContainsString(System.String[],System.String)">
            <summary>Returns true if the array contains the string we are looking for</summary>
            <param name="hostArray">The host array.</param>
            <param name="searchText">The search string.</param>
            <returns>True or false</returns>
            <example>
            string[] testArray = new string[] { "One", "Two", "Three" };
            bool result1 = StringHelper.ArrayContainsString(testArray, "one", true); // returns true
            bool result2 = StringHelper.ArrayContainsString(testArray, "one"); // returns false
            bool result3 = StringHelper.ArrayContainsString(testArray, "One"); // returns true
            bool result4 = StringHelper.ArrayContainsString(testArray, "Four"); // returns false
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.ArrayContainsString(System.String[],System.String,System.Boolean)">
            <summary>Returns true if the array contains the string we are looking for</summary>
            <param name="hostArray">The host array.</param>
            <param name="searchText">The search string.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns>True or false</returns>
            <example>
            string[] testArray = new string[] { "One", "Two", "Three" };
            bool result1 = StringHelper.ArrayContainsString(testArray, "one", true); // returns true
            bool result2 = StringHelper.ArrayContainsString(testArray, "one"); // returns false
            bool result3 = StringHelper.ArrayContainsString(testArray, "One"); // returns true
            bool result4 = StringHelper.ArrayContainsString(testArray, "Four"); // returns false
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.TryIntParse(System.String,System.Int32)">
            <summary>Tries to parse a string value as an integer. If the parse fails, the provided default value will be inserted</summary>
            <param name="value">The value.</param>
            <param name="failedDefault">The failed default.</param>
            <returns></returns>
            <example>
            string value = "1";
            int valueInt = StringHelper.TryIntParse(value, -1);
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.TryGuidParse(System.String,System.Guid)">
            <summary>Tries to parse a string value as an Guid. If the parse fails, the provided default value will be inserted</summary>
            <param name="value">The value.</param>
            <param name="failedDefault">The failed default.</param>
            <returns></returns>
            <example>
            string value = "xxx";
            Guid valueGuid = StringHelper.TryGuidParse(value, Guid.Empty);
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.TryGuidParse(System.String)">
            <summary>Tries to parse a string value as an Guid. If the parse fails, Guid.Empty will be returned</summary>
            <param name="value">The value.</param>
            <returns></returns>
            <example>
            string value = "xxx";
            Guid valueGuid = StringHelper.TryGuidParse(value);
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.StringHelper.TryBoolParse(System.String,System.Boolean)">
            <summary>Tries to parse a string value as a boolean.</summary>
            <param name="value">The value.</param>
            <param name="failedDefault">Value returned if the string cannot be converted to a boolean.</param>
            <returns></returns>
            <example>
            string value = "xxx";
            bool valueBool = StringHelper.TryBoolParse(value);
            </example>
        </member>
        <member name="T:Syncfusion.Core.Utilities.ZipFile">
            <summary>
            ZIP File handling class
            </summary>
            <example>
            // Open existing ZIP file
            var zip = ZipFile.Read(@"c:\test.zip");
            zip.ExtractAll(@"c:\ExtractFolder");
            
            // Create new ZIP file
            var zip = new ZipFile("MyFile.zip");
            zip.AddFile(@"c:\Markus.jpg");
            zip.AddBytes("This is a test file".ToByteArraySafe(), "ReadMe.txt");
            zip.Save();
            </example>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipFile.Name">
            <summary>
            Name of the ZIP File
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipFile.TrimVolumeFromFullyQualifiedPaths">
            <summary>Indicates whether the volume should be trimmed from fully qualified paths</summary>
            <value><c>true</c> if [trim volume from fully qualified paths]; otherwise, <c>false</c>.</value>
            <remarks>
            when this is set, we trim the volume (eg C:) off any fully-qualified pathname, 
            before writing the ZipEntry into the ZipFile. 
            We default this to true.  This allows Windows Explorer to read the zip archives properly. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipFile.ReadStream">
            <summary>
            Read stream used internally by this class
            </summary>
            <value>The read stream.</value>
        </member>
        <member name="F:Syncfusion.Core.Utilities.ZipFile._readStream">
            <summary>
            Internal field for the read stream
            </summary>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipFile.WriteStream">
            <summary>
            Write stream used internally by this class
            </summary>
            <value>The write stream.</value>
        </member>
        <member name="F:Syncfusion.Core.Utilities.ZipFile._writeStream">
            <summary>
            Internal field for the write stream
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.InitializeDefaultValues">
            <summary>
            Initializes the default values of properties inside this class
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Core.Utilities.ZipFile"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Core.Utilities.ZipFile"/> class.
            </summary>
            <param name="newZipFileName">Name of the new ZIP file.</param>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.AddItem(System.String)">
            <summary>
            Adds a file or folder to the ZIP archive
            </summary>
            <param name="fileOrDirectoryName">Name of the file or directory.</param>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddItem("C:\DirectoryToZip");
            newZip.AddItem("C:\Folder\Test.exe");
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.AddBytes(System.Byte[],System.String,System.DateTime)">
            <summary>
            Adds raw data to the ZIP archive as a file.
            </summary>
            <param name="bytesToCompress">Data/ file bytes</param>
            <param name="fileName">Name of the file.</param>
            <param name="fileWriteTime">The file write time.</param>
            <returns>ZIP Entry</returns>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddBytes("Hello World".ToByteArraySafe(), "Test.txt", DateTime.Now);
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.AddBytes(System.Byte[],System.String)">
            <summary>
            Adds raw data to the ZIP archive as a file.
            </summary>
            <param name="bytesToCompress">Data/ file bytes</param>
            <param name="fileName">Name of the file.</param>
            <returns>ZIP Entry</returns>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddBytes("Hello World".ToByteArraySafe(), "Test.txt");
            </example>
            <remarks>Current date time is assumed as the file date.</remarks>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.AddFile(System.String)">
            <summary>
            Adds the file to the ZIP archive.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddFile("C:\Folder\Test.exe");
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.AddDirectory(System.String)">
            <summary>
            Adds a whole Directory/Folder to the ZIP archive
            </summary>
            <param name="directory">The directory.</param>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddDirectory("C:\Folder");
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.SaveToStream">
            <summary>
            Saves the ZIP archive to a stream
            </summary>
            <returns>Stream</returns>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddDirectory("C:\Folder");
            Stream result = newZip.SaveToStream();
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.Save">
            <summary>
            Saves the ZIP file
            </summary>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddDirectory("C:\Folder");
            newZip.Save();
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.WriteCentralDirectoryStructure">
            <summary>
            Writes the central directory structure.
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.WriteCentralDirectoryFooter(System.Int64,System.Int64)">
            <summary>
            Writes the central directory footer.
            </summary>
            <param name="startOfCentralDirectory">The start of central directory.</param>
            <param name="endOfCentralDirectory">The end of central directory.</param>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.Read(System.String)">
            <summary>
            This will throw if the zipfile does not exist.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>ZIP File</returns>
            <example>
            var archive = ZipFile.Read("c:\Downloads\Test.zip");
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.Read(System.Byte[],System.String)">
            <summary>
            Reads a ZIP File from in-memory bytes
            </summary>
            <param name="zipBytes">The zip bytes.</param>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
            <example>
            var zipFile = ZipFile.Read(data, "Test.zip");
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.Read(System.Byte[])">
            <summary>
            Reads a ZIP File from in-memory bytes
            </summary>
            <param name="zipBytes">The zip bytes.</param>
            <returns></returns>
            <example>
            var zipFile = ZipFile.Read(data);
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.ExtractAll(System.String)">
            <summary>
            Extracts all contents of the ZIP File to the specified path
            </summary>
            <param name="path">The path.</param>
            <example>
            var archive = ZipFile.Read("c:\Downloads\Test.zip");
            archive.ExtractAll("c:\Downloads\Extract");
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.Extract(System.String)">
            <summary>
            Extracts the specified file from the ZIP archive
            </summary>
            <param name="fileName">Name of the file within the archive.</param>
            <example>
            var zipFile = ZipFile.Read("Photos.zip");
            zipFile.Extract("Markus.jpg");
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.Extract(System.String,System.IO.Stream)">
            <summary>
            Extracts the specified file name into the extract stream.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="extractStream">The extract stream.</param>
            var zipFile = ZipFile.Read("Photos.zip");
            var stream = new MemoryStream();
            zipFile.Extract("Markus.jpg", stream);
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipFile.Item(System.String)">
            <summary>
            Gets the ZIP file corresponding with the provided file name
            </summary>
            <value></value>
            <example>
            var zipFile = ZipFile.Read("Photos.zip");
            var photo = zipFile["Markus.jpg"];
            </example>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.Core.Utilities.ZipFile"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipFile.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:Syncfusion.Core.Utilities.ZipFile._disposed">
            <summary>
            Indicator whether or not the dispose ran (used internally)
            </summary>
        </member>
        <member name="F:Syncfusion.Core.Utilities.ZipFile._entries">
            <summary>
            List of ZIP entries (used internally)
            </summary>
        </member>
        <member name="F:Syncfusion.Core.Utilities.ZipFile._directoryEntries">
            <summary>
            List of Directory entries (used internally)
            </summary>
        </member>
        <member name="T:Syncfusion.Core.Utilities.ZipEntry">
            <summary>
            Represents a single entry (file) within a ZIP archive
            </summary>
        </member>
        <member name="F:Syncfusion.Core.Utilities.ZipEntry.ZipEntrySignature">
            <summary>
            ZIP Entry Signature
            </summary>
        </member>
        <member name="F:Syncfusion.Core.Utilities.ZipEntry.ZipEntryDataDescriptorSignature">
            <summary>
            ZIP Entry Data Descriptor Signature
            </summary>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipEntry.LastModified">
            <summary>
            Gets or sets the last modified date.
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipEntry.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipEntry.BytesToCompres">
            <summary>
            Gets or sets the bytes to compres.
            </summary>
            <value>The bytes to compres.</value>
            <remarks>
            If this is set, this array is used, rather than a file that needs to be opened
            </remarks>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipEntry.DirectoryNameOverride">
            <summary>
            Gets or sets the directory name override.
            </summary>
            <value>The directory name override.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipEntry.CompressedFileName">
            <summary>
            Gets the name of the compressed file.
            </summary>
            <value>The name of the compressed file.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipEntry.VersionNeeded">
            <summary>
            Gets or sets the version needed.
            </summary>
            <value>The version needed.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipEntry.BitField">
            <summary>
            Gets or sets the bit field.
            </summary>
            <value>The bit field.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipEntry.CompressionMethod">
            <summary>
            Gets or sets the compression method.
            </summary>
            <value>The compression method.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipEntry.CompressedSize">
            <summary>
            Gets or sets the size of the compressed.
            </summary>
            <value>The size of the compressed.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipEntry.UncompressedSize">
            <summary>
            Gets or sets the size of the uncompressed.
            </summary>
            <value>The size of the uncompressed.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipEntry.CompressionRatio">
            <summary>
            Gets the compression ratio.
            </summary>
            <value>The compression ratio.</value>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipEntry.SignatureIsNotValid(System.Int32)">
            <summary>
            Returns false if the signature is not a valid ZIP entry signature
            </summary>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipEntry.Read(System.IO.Stream)">
            <summary>
            Reads the entry from the stream
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipEntry.Create(System.String)">
            <summary>
            Creates a ZIP entry for the specified file name
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipEntry.Create(System.Byte[],System.String,System.DateTime)">
            <summary>
            Creates the specified bytes to compress.
            </summary>
            <param name="bytesToCompress">The bytes to compress.</param>
            <param name="fileName">Name of the file.</param>
            <param name="fileDate">The file date.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipEntry.Extract">
            <summary>
            Extracts the current ZIP file entry
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipEntry.Extract(System.IO.Stream)">
            <summary>
            Extracts the current ZIP file entry to the provided stream
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipEntry.Extract(System.String)">
            <summary>
            Extracts to the specified base directory.
            </summary>
            <param name="baseDirectory">The base directory.</param>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipEntry.Extract(System.String,System.IO.Stream)">
            <summary>
            Extracts to the specified base directory or stream.
            </summary>
            <param name="baseDirectory">The base directory.</param>
            <param name="stream">The stream.</param>
            <remarks>
            pass in either baseDirectory or stream, but not both. 
            In other words, you can extract to a stream or to a directory, but not both!
            </remarks>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipEntry.WriteCentralDirectoryEntry(System.IO.Stream)">
            <summary>
            Writes the central directory entry to the provided stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipEntry.WriteHeader(System.IO.Stream,System.Byte[])">
            <summary>
            Writes the header to the provided stream
            </summary>
            <param name="stream">The stream.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipEntry.Write(System.IO.Stream)">
            <summary>
            Writes the specified out stream.
            </summary>
            <param name="outStream">The out stream.</param>
        </member>
        <member name="T:Syncfusion.Core.Utilities.ZipDirEntry">
            <summary>
            ZIP directory entry
            </summary>
        </member>
        <member name="F:Syncfusion.Core.Utilities.ZipDirEntry.ZipDirectoryEntrySignature">
            <summary>
            ZIP directory entry signature
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipDirEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Core.Utilities.ZipDirEntry"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipDirEntry.LastModified">
            <summary>
            Gets or sets the last modified date.
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipDirEntry.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipDirEntry.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipDirEntry.VersionMadeBy">
            <summary>
            Gets or sets the version made by.
            </summary>
            <value>The version made by.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipDirEntry.VersionNeeded">
            <summary>
            Gets or sets the version needed.
            </summary>
            <value>The version needed.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipDirEntry.CompressionMethod">
            <summary>
            Gets or sets the compression method.
            </summary>
            <value>The compression method.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipDirEntry.CompressedSize">
            <summary>
            Gets or sets the size of the compressed.
            </summary>
            <value>The size of the compressed.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipDirEntry.UncompressedSize">
            <summary>
            Gets or sets the size of the uncompressed.
            </summary>
            <value>The size of the uncompressed.</value>
        </member>
        <member name="P:Syncfusion.Core.Utilities.ZipDirEntry.CompressionRatio">
            <summary>
            Gets the compression ratio.
            </summary>
            <value>The compression ratio.</value>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipDirEntry.#ctor(Syncfusion.Core.Utilities.ZipEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Core.Utilities.ZipDirEntry"/> class.
            </summary>
            <param name="zipEntry">The zip entry.</param>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipDirEntry.Read(System.IO.Stream)">
            <summary>
            Reads the specified entry stream.
            </summary>
            <param name="entryStream">The entry stream.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.ZipDirEntry.SignatureIsNotValid(System.Int32)">
            <summary>
            Returns false if the directory signature is not a valid ZIP directory signature
            </summary>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Core.Utilities.SharedZipFunctionality">
            <summary>
            Shared functionality
            </summary>
        </member>
        <member name="M:Syncfusion.Core.Utilities.SharedZipFunctionality.StringFromBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a string of specified location and length from the buffer.
            </summary>
            <param name="buf">The buf.</param>
            <param name="start">The start.</param>
            <param name="maxLength">Length of the max.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.SharedZipFunctionality.ReadSignature(System.IO.Stream)">
            <summary>
            Reads the signature from the provided stream.
            </summary>
            <param name="signatureStream">The signature stream.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.SharedZipFunctionality.FindSignature(System.IO.Stream,System.Int32)">
            <summary>
            Finds the signature in the provided stream.
            </summary>
            <param name="signatureStream">The signature stream.</param>
            <param name="signatureToFind">The signature to find.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.SharedZipFunctionality.PackedToDateTime(System.Int32)">
            <summary>
            Turns a packed date time into a .NET date time
            </summary>
            <param name="packedDateTime">The packed date time.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.SharedZipFunctionality.DateTimeToPacked(System.DateTime)">
            <summary>
            Turns a .NET date time into a packed date time
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Core.Utilities.CRC32">
            <summary>
            Calculates a 32bit Cyclic Redundancy Checksum (CRC) using the
            same polynomial used by Zip.
            </summary>
        </member>
        <member name="P:Syncfusion.Core.Utilities.CRC32.TotalBytesRead">
            <summary>
            Gets the total bytes read.
            </summary>
            <value>The total bytes read.</value>
        </member>
        <member name="M:Syncfusion.Core.Utilities.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Syncfusion.Core.Utilities.CRC32.#ctor">
            <summary>
            Construct an instance of the CRC32 class, pre-initialising the table
            for speed of lookup.
            </summary>
        </member>
        <member name="T:Syncfusion.Core.ObjectHelper">
            <summary>
            This object features a number of methods that are useful in dealing with objects
            </summary>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.CreateObject(System.String,System.String)">
            <summary>
            Loads a named object from an assembly
            </summary>
            <param name="className">Fully qualified name of the class</param>
            <param name="assemblyName">Assembly name (preferrably the fully or partially qualified name, or the file name)</param>
            <returns>Newly instantiated object</returns>
            <example>SqlDataService oService = (SqlDataService)ObjectHelper.CreateObject("EPS.Data.SqlClient","SqlDataService")</example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.SerializeToBinaryStream(System.Object)">
             <summary>
             Serializes an object to its binary state
             </summary>
             <param name="objectToSerialize">The object to serialize.</param>
             <returns>Stream of binary information for the object</returns>
             <remarks>
             For this to work, the provided object must be serializable.
            
             This method can be used as an extension method.
             </remarks>
             <example>
             // More code...
             var stream = customer.SerializeToBinaryStream();
            
             // Or
            
             var stream = ObjectHelper.SerializeToBinaryStream(customer);
             </example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.DeserializeFromBinaryStream(System.IO.Stream)">
            <summary>
            Deserializes an object from its state stored in a binary stream.
            </summary>
            <param name="stateStream">The state stream.</param>
            <returns>Object instance.</returns>
            <remarks>For this to work, the stream must contain a serialized object</remarks>
            <example>
            Customer customer = (Customer)ObjectHelper.DeserializeFromBinaryStream(stream);
            </example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.DeserializeFromBinary(System.IO.Stream)">
            <summary>
            Deserializes the stream to an object
            </summary>
            <param name="stateStream">The state stream.</param>
            <returns>Object instance</returns>
            <remarks>
            For this to work, the stream must contain a serialized object
            This is an extension method.
            </remarks>
            <example>
            using Syncfusion.Addin.Core;
            // more code
            Customer customer = (Customer)stream.DeserializeFromBinary();
            </example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.SerializeToBinaryArray(System.Object)">
            <summary>
            Serializes an object to its binary state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            Byte array of binary information for the object
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using Syncfusion.Addin.Core;
            // more code...
            byte[] serialized = customer.SerializeToBinaryArray();
            // or
            byte[] serialized = ObjectHelper.SerializeToBinaryArray(customer);
            </example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.SerializeToXmlStream(System.Object)">
            <summary>
            Serializes an object to its XML state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML stream representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using Syncfusion.Addin.Core;
            // more code
            Stream xmlStream = customer.SerializeToXmlStream();
            // or
            Stream xmlStream = ObjectHelper.SerializeToXmlStream(customer);
            </example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.SerializeToXmlString(System.Object)">
            <summary>
            Serializes an object to its XML state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML string representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using Syncfusion.Addin.Core;
            // more code
            string xml = customer.SerializeToXmlString();
            // or
            string xml = ObjectHelper.SerializeToXmlString(customer);
            </example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.SerializeToXmlDocument(System.Object)">
            <summary>
            Serializes an object to its XML state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML document representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using Syncfusion.Addin.Core;
            // more code
            XmlDocument xml = customer.SerializeToXmlDocument();
            // or
            XmlDocument xml = ObjectHelper.SerializeToXmlDocument(customer);
            </example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.DeserializeFromXmlStream(System.IO.Stream,System.Type)">
            <summary>
            Deserializes an object from its state stored in an xml stream.
            </summary>
            <param name="stateStream">The state stream.</param>
            <param name="expectedType">The expected type (which will be the returned type).</param>
            <returns>Object instance.</returns>
            <remarks>
            For this to work, the XML Stream must contain a seralized object
            </remarks>
            <example>
            Customer customer = (Customer)ObjectHelper.DeserializeFromXmlStream(stream, typeof(Customer));
            </example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.DeserializeFromXml(System.IO.Stream,System.Type)">
            <summary>
            Deserializes an object from its state stored in an xml stream.
            </summary>
            <param name="stateStream">The state stream.</param>
            <param name="expectedType">The expected type.</param>
            <returns>Object instance</returns>
            <remarks>
            For this to work, the XML Stream must contain a seralized object
            </remarks>
            <example>
            using Syncfusion.Addin.Core;
            // more code
            Customer customer = (Customer)stream.DeserializeFromXmlStream(typeof(Customer));
            </example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.SerializeToSoapStream(System.Object)">
            <summary>
            Serializes an object to its SOAP representation
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML stream representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using Syncfusion.Addin.Core;
            // more code
            Stream stream = customer.SerializeToSoapStream();
            // or
            Stream stream = ObjectHelper.SerializeToSoapStream(customer);
            </example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.SerializeToSoapString(System.Object)">
            <summary>
            Serializes an object to its SOAP state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML string representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using Syncfusion.Addin.Core;
            // more code
            string state = customer.SerializeToSoapString();
            // or
            string state = ObjectHelper.SerializeToSoapString(customer);
            </example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.SerializeToSoapDocument(System.Object)">
            <summary>
            Serializes an object to its SOAP state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML document representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using Syncfusion.Addin.Core;
            // more code
            XmlDocument xml = customer.SerializeToSoapDocument();
            // or
            XmlDocument xml =ObjectHelper.SerializeToSoapDocument(customer);
            </example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.ValuesDiffer(System.Object,System.Object)">
            <summary>
            Compares the values of two objects and returns true if the values are different
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>True if values DIFFER</returns>
            <example>
            object o1 = "Hello";
            object o2 = "World";
            object o3 = 25;
            ObjectHelper.ValuesDiffer(o1, o2); // returns true;
            ObjectHelper.ValuesDiffer(o1, o3); // returns true;
            </example>
            <remarks>
            This method has been created to be easily able to compare objects of unknown types.
            In particular, this is useful when comparing two fields in a DataSet.
            This method can even handle byte arrays.
            </remarks>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.GetPropertyValue``1(System.Object,System.String)">
            <summary>Dynamically retrieves a property value from the specified object</summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="valueObject">The value object.</param>
            <param name="path">Name of the property.</param>
            <returns>Property value or default value</returns>
            <remarks>
            The property must be a readable instance property.
            This method can be called as an extension method.
            </remarks>
            <example>
            using Syncfusion.Addin.Core;
            // more code
            var customer = this.GetCustomerObject();
            string name = customer.GetPropertyValue&lt;string&gt;("LastName");
            </example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.GetPropertyByPath(System.Object,System.String,System.Object@)">
            <summary>
            Returns property information based on the provided path (path can be a simple property name or a more complex path)
            </summary>
            <param name="valueObject">The value object.</param>
            <param name="path">The path.</param>
            <param name="parentObject">The parent object.</param>
            <returns>PropertyInfo.</returns>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.SetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Dynamically retrieves a property value from the specified object
            </summary>
            <typeparam name="TValue">The type of the value that is to be set.</typeparam>
            <param name="valueObject">The value object.</param>
            <param name="path">Name of the property.</param>
            <param name="value">The value that is to be set.</param>
            <returns>True if the value was set successfully</returns>
            <remarks>
            The property must be a writable instance property.
            This method can be called as an extension method.
            </remarks>
            <example>
            using Syncfusion.Addin.Core;
            // more code
            var customer = this.GetCustomerObject();
            customer.SetPropertyValue("LastName", "Smith");
            </example>
        </member>
        <member name="M:Syncfusion.Core.ObjectHelper.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Dynamically invokes the specified method on the defined object
            </summary>
            <typeparam name="TResult">The expected return type for the method</typeparam>
            <param name="valueObject">The value object (object that contains the method).</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">The parameters.</param>
            <returns>The method's return value</returns>
            <remarks>
            The method must be an instance method
            This method can be called as an extension method.
            </remarks>
            <example>
            using Syncfusion.Addin.Core;
            // more code
            var customer = this.GetCustomerObject();
            object[] parameters = { "John", "M.", "Smith" };
            string fullName = customer.InvokeMethod&lt;string&gt;("GetFullName", parameters);
            </example>
        </member>
        <member name="T:Syncfusion.Core.ObjectInstantiationException">
            <summary>
            Exception thrown whenever object instantiation fails.
            </summary>
        </member>
        <member name="M:Syncfusion.Core.ObjectInstantiationException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Syncfusion.Core.ObjectInstantiationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Syncfusion.Core.ObjectInstantiationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Syncfusion.Core.ObjectInstantiationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
    </members>
</doc>
